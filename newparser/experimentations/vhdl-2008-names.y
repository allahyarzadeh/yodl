/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static Name* YY_RESULT_Name_ = 0;
Name* pName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}
Name* pName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}

static Function_call* YY_RESULT_Function_call_ = 0;
Function_call* pFunction_call(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_call_;
  }
}
Function_call* pFunction_call(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_call_;
  }
}

static ListAssociation_element* YY_RESULT_ListAssociation_element_ = 0;
ListAssociation_element* pListAssociation_element(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListAssociation_element_;
  }
}
ListAssociation_element* pListAssociation_element(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListAssociation_element_;
  }
}

static ListExpression* YY_RESULT_ListExpression_ = 0;
ListExpression* pListExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}
ListExpression* pListExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}

static Association_element* YY_RESULT_Association_element_ = 0;
Association_element* pAssociation_element(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Association_element_;
  }
}
Association_element* pAssociation_element(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Association_element_;
  }
}

static Actual_part* YY_RESULT_Actual_part_ = 0;
Actual_part* pActual_part(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Actual_part_;
  }
}
Actual_part* pActual_part(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Actual_part_;
  }
}

static Acutal_part* YY_RESULT_Acutal_part_ = 0;
Acutal_part* pAcutal_part(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Acutal_part_;
  }
}
Acutal_part* pAcutal_part(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Acutal_part_;
  }
}

static Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}
Expression* pExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

static Actual_designator* YY_RESULT_Actual_designator_ = 0;
Actual_designator* pActual_designator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Actual_designator_;
  }
}
Actual_designator* pActual_designator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Actual_designator_;
  }
}

static Acutal_designator* YY_RESULT_Acutal_designator_ = 0;
Acutal_designator* pAcutal_designator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Acutal_designator_;
  }
}
Acutal_designator* pAcutal_designator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Acutal_designator_;
  }
}

static Prefix* YY_RESULT_Prefix_ = 0;
Prefix* pPrefix(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prefix_;
  }
}
Prefix* pPrefix(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prefix_;
  }
}

static Selected_name* YY_RESULT_Selected_name_ = 0;
Selected_name* pSelected_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Selected_name_;
  }
}
Selected_name* pSelected_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Selected_name_;
  }
}

static Suffix* YY_RESULT_Suffix_ = 0;
Suffix* pSuffix(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Suffix_;
  }
}
Suffix* pSuffix(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Suffix_;
  }
}

static Attribute_name* YY_RESULT_Attribute_name_ = 0;
Attribute_name* pAttribute_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Attribute_name_;
  }
}
Attribute_name* pAttribute_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Attribute_name_;
  }
}

static Slice_name* YY_RESULT_Slice_name_ = 0;
Slice_name* pSlice_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Slice_name_;
  }
}
Slice_name* pSlice_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Slice_name_;
  }
}

static Indexed_name* YY_RESULT_Indexed_name_ = 0;
Indexed_name* pIndexed_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Indexed_name_;
  }
}
Indexed_name* pIndexed_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Indexed_name_;
  }
}

static Character_literal* YY_RESULT_Character_literal_ = 0;
Character_literal* pCharacter_literal(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Character_literal_;
  }
}
Character_literal* pCharacter_literal(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Character_literal_;
  }
}

static Graphic_character* YY_RESULT_Graphic_character_ = 0;
Graphic_character* pGraphic_character(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Graphic_character_;
  }
}
Graphic_character* pGraphic_character(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Graphic_character_;
  }
}

static Operator_symbol* YY_RESULT_Operator_symbol_ = 0;
Operator_symbol* pOperator_symbol(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Operator_symbol_;
  }
}
Operator_symbol* pOperator_symbol(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Operator_symbol_;
  }
}

static Simple_name* YY_RESULT_Simple_name_ = 0;
Simple_name* pSimple_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Simple_name_;
  }
}
Simple_name* pSimple_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Simple_name_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Name* name_;
  Function_call* function_call_;
  ListAssociation_element* listassociation_element_;
  ListExpression* listexpression_;
  Association_element* association_element_;
  Actual_part* actual_part_;
  Acutal_part* acutal_part_;
  Expression* expression_;
  Actual_designator* actual_designator_;
  Acutal_designator* acutal_designator_;
  Prefix* prefix_;
  Selected_name* selected_name_;
  Suffix* suffix_;
  Attribute_name* attribute_name_;
  Slice_name* slice_name_;
  Indexed_name* indexed_name_;
  Character_literal* character_literal_;
  Graphic_character* graphic_character_;
  Operator_symbol* operator_symbol_;
  Simple_name* simple_name_;
}

%token _ERROR_
%token _SYMB_0    //   (
%token _SYMB_1    //   )
%token _SYMB_2    //   ,
%token _SYMB_3    //   =>
%token _SYMB_4    //   .
%token _SYMB_5    //   '
%token _SYMB_6    //   all
%token _SYMB_7    //   foobar
%token<string_> _SYMB_8    //   Decimal_Literal
%token<string_> _SYMB_9    //   Base_Spec

%type <name_> Name
%type <function_call_> Function_call
%type <listassociation_element_> ListAssociation_element
%type <listexpression_> ListExpression
%type <association_element_> Association_element
%type <actual_part_> Actual_part
%type <acutal_part_> Acutal_part
%type <expression_> Expression
%type <actual_designator_> Actual_designator
%type <acutal_designator_> Acutal_designator
%type <prefix_> Prefix
%type <selected_name_> Selected_name
%type <suffix_> Suffix
%type <attribute_name_> Attribute_name
%type <slice_name_> Slice_name
%type <indexed_name_> Indexed_name
%type <character_literal_> Character_literal
%type <graphic_character_> Graphic_character
%type <operator_symbol_> Operator_symbol
%type <simple_name_> Simple_name

%start Name
%token<string_> _STRING_
%token<char_> _CHAR_
%token<int_> _INTEGER_
%token<string_> _IDENT_

%%
Name : Simple_name {  $$ = new NameSimple($1); YY_RESULT_Name_= $$; } 
  | Operator_symbol {  $$ = new NameOp($1); YY_RESULT_Name_= $$; }
  | Character_literal {  $$ = new NameChar($1); YY_RESULT_Name_= $$; }
  | Selected_name {  $$ = new NameSelected($1); YY_RESULT_Name_= $$; }
  | Indexed_name {  $$ = new NameIndexed($1); YY_RESULT_Name_= $$; }
  | Slice_name {  $$ = new NameSlice($1); YY_RESULT_Name_= $$; }
  | Attribute_name {  $$ = new NameAttr($1); YY_RESULT_Name_= $$; }
;
Function_call : Name {  $$ = new FunctionCallNyadic($1); YY_RESULT_Function_call_= $$; } 
  | Name _SYMB_0 ListAssociation_element _SYMB_1 {  std::reverse($3->begin(),$3->end()) ;$$ = new FunctionCallPolyadic($1, $3); YY_RESULT_Function_call_= $$; }
;
ListAssociation_element : Association_element {  $$ = new ListAssociation_element() ; $$->push_back($1); YY_RESULT_ListAssociation_element_= $$; } 
  | Association_element _SYMB_2 ListAssociation_element {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListAssociation_element_= $$; }
;
ListExpression : Expression {  $$ = new ListExpression() ; $$->push_back($1); YY_RESULT_ListExpression_= $$; } 
  | Expression _SYMB_2 ListExpression {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListExpression_= $$; }
;
Association_element : Actual_part {  $$ = new AssocElementPositional($1); YY_RESULT_Association_element_= $$; } 
  | Name _SYMB_3 Actual_part {  $$ = new AssocElementNamedParam($1, $3); YY_RESULT_Association_element_= $$; }
;
Actual_part : Actual_designator {  $$ = new ActualPartD($1); YY_RESULT_Actual_part_= $$; } 
;
Acutal_part : Name _SYMB_0 Actual_designator _SYMB_1 {  $$ = new ActualFoo($1, $3); YY_RESULT_Acutal_part_= $$; } 
;
Expression : Name {  $$ = new ExpressionName($1); YY_RESULT_Expression_= $$; } 
  | _INTEGER_ {  $$ = new ExpressionNumber($1); YY_RESULT_Expression_= $$; }
;
Actual_designator : Expression {  $$ = new ExpressionDesignator($1); YY_RESULT_Actual_designator_= $$; } 
;
Acutal_designator : Name {  $$ = new NameDesignator($1); YY_RESULT_Acutal_designator_= $$; } 
;
Prefix : Name {  $$ = new NamePrefix($1); YY_RESULT_Prefix_= $$; } 
  | Function_call {  $$ = new FunctionPrefix($1); YY_RESULT_Prefix_= $$; }
;
Selected_name : Prefix _SYMB_4 Suffix {  $$ = new SelectedName($1, $3); YY_RESULT_Selected_name_= $$; } 
;
Suffix : _SYMB_6 {  $$ = new AllSuffix(); YY_RESULT_Suffix_= $$; } 
  | _SYMB_7 _SYMB_6 {  $$ = new AllSuffixfoo(); YY_RESULT_Suffix_= $$; }
  | Simple_name {  $$ = new NameSuffix($1); YY_RESULT_Suffix_= $$; }
;
Attribute_name : Prefix _SYMB_5 Name {  $$ = new AttributeName($1, $3); YY_RESULT_Attribute_name_= $$; } 
;
Slice_name : Prefix _SYMB_0 Expression _SYMB_1 {  $$ = new SliceName($1, $3); YY_RESULT_Slice_name_= $$; } 
;
Indexed_name : Prefix _SYMB_0 ListExpression _SYMB_1 {  std::reverse($3->begin(),$3->end()) ;$$ = new IndexedName($1, $3); YY_RESULT_Indexed_name_= $$; } 
;
Character_literal : _SYMB_5 _CHAR_ _SYMB_5 {  $$ = new CharLiteral($2); YY_RESULT_Character_literal_= $$; } 
;
Graphic_character : _CHAR_ {  $$ = new GraphicChar($1); YY_RESULT_Graphic_character_= $$; } 
;
Operator_symbol : _STRING_ {  $$ = new OperatorSymbol($1); YY_RESULT_Operator_symbol_= $$; } 
;
Simple_name : _IDENT_ {  $$ = new SimpleName($1); YY_RESULT_Simple_name_= $$; } 
;

