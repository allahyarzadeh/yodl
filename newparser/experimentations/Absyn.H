#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Decimal_Literal;
typedef std::string Base_Spec;


/********************   Forward Declarations    ********************/

class Name;
class Function_call;
class Association_element;
class Actual_part;
class Acutal_part;
class Expression;
class Actual_designator;
class Acutal_designator;
class Prefix;
class Selected_name;
class Suffix;
class Attribute_name;
class Slice_name;
class Indexed_name;
class Character_literal;
class Graphic_character;
class Operator_symbol;
class Simple_name;
class NameSimple;
class NameOp;
class NameChar;
class NameSelected;
class NameIndexed;
class NameSlice;
class NameAttr;
class FunctionCallNyadic;
class FunctionCallPolyadic;
class AssocElementPositional;
class AssocElementNamedParam;
class ActualPartD;
class ActualFoo;
class ExpressionName;
class ExpressionNumber;
class ExpressionDesignator;
class NameDesignator;
class NamePrefix;
class FunctionPrefix;
class SelectedName;
class AllSuffix;
class AllSuffixfoo;
class NameSuffix;
class AttributeName;
class SliceName;
class IndexedName;
class CharLiteral;
class GraphicChar;
class OperatorSymbol;
class SimpleName;
class ListAssociation_element;
class ListExpression;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitName(Name *p) = 0;
  virtual void visitFunction_call(Function_call *p) = 0;
  virtual void visitAssociation_element(Association_element *p) = 0;
  virtual void visitActual_part(Actual_part *p) = 0;
  virtual void visitAcutal_part(Acutal_part *p) = 0;
  virtual void visitExpression(Expression *p) = 0;
  virtual void visitActual_designator(Actual_designator *p) = 0;
  virtual void visitAcutal_designator(Acutal_designator *p) = 0;
  virtual void visitPrefix(Prefix *p) = 0;
  virtual void visitSelected_name(Selected_name *p) = 0;
  virtual void visitSuffix(Suffix *p) = 0;
  virtual void visitAttribute_name(Attribute_name *p) = 0;
  virtual void visitSlice_name(Slice_name *p) = 0;
  virtual void visitIndexed_name(Indexed_name *p) = 0;
  virtual void visitCharacter_literal(Character_literal *p) = 0;
  virtual void visitGraphic_character(Graphic_character *p) = 0;
  virtual void visitOperator_symbol(Operator_symbol *p) = 0;
  virtual void visitSimple_name(Simple_name *p) = 0;
  virtual void visitNameSimple(NameSimple *p) = 0;
  virtual void visitNameOp(NameOp *p) = 0;
  virtual void visitNameChar(NameChar *p) = 0;
  virtual void visitNameSelected(NameSelected *p) = 0;
  virtual void visitNameIndexed(NameIndexed *p) = 0;
  virtual void visitNameSlice(NameSlice *p) = 0;
  virtual void visitNameAttr(NameAttr *p) = 0;
  virtual void visitFunctionCallNyadic(FunctionCallNyadic *p) = 0;
  virtual void visitFunctionCallPolyadic(FunctionCallPolyadic *p) = 0;
  virtual void visitAssocElementPositional(AssocElementPositional *p) = 0;
  virtual void visitAssocElementNamedParam(AssocElementNamedParam *p) = 0;
  virtual void visitActualPartD(ActualPartD *p) = 0;
  virtual void visitActualFoo(ActualFoo *p) = 0;
  virtual void visitExpressionName(ExpressionName *p) = 0;
  virtual void visitExpressionNumber(ExpressionNumber *p) = 0;
  virtual void visitExpressionDesignator(ExpressionDesignator *p) = 0;
  virtual void visitNameDesignator(NameDesignator *p) = 0;
  virtual void visitNamePrefix(NamePrefix *p) = 0;
  virtual void visitFunctionPrefix(FunctionPrefix *p) = 0;
  virtual void visitSelectedName(SelectedName *p) = 0;
  virtual void visitAllSuffix(AllSuffix *p) = 0;
  virtual void visitAllSuffixfoo(AllSuffixfoo *p) = 0;
  virtual void visitNameSuffix(NameSuffix *p) = 0;
  virtual void visitAttributeName(AttributeName *p) = 0;
  virtual void visitSliceName(SliceName *p) = 0;
  virtual void visitIndexedName(IndexedName *p) = 0;
  virtual void visitCharLiteral(CharLiteral *p) = 0;
  virtual void visitGraphicChar(GraphicChar *p) = 0;
  virtual void visitOperatorSymbol(OperatorSymbol *p) = 0;
  virtual void visitSimpleName(SimpleName *p) = 0;
  virtual void visitListAssociation_element(ListAssociation_element *p) = 0;
  virtual void visitListExpression(ListExpression *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitDecimal_Literal(Decimal_Literal x) = 0;
  virtual void visitBase_Spec(Base_Spec x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Name : public Visitable
{
public:
  virtual Name *clone() const = 0;

};

class Function_call : public Visitable
{
public:
  virtual Function_call *clone() const = 0;

};

class Association_element : public Visitable
{
public:
  virtual Association_element *clone() const = 0;

};

class Actual_part : public Visitable
{
public:
  virtual Actual_part *clone() const = 0;

};

class Acutal_part : public Visitable
{
public:
  virtual Acutal_part *clone() const = 0;

};

class Expression : public Visitable
{
public:
  virtual Expression *clone() const = 0;

};

class Actual_designator : public Visitable
{
public:
  virtual Actual_designator *clone() const = 0;

};

class Acutal_designator : public Visitable
{
public:
  virtual Acutal_designator *clone() const = 0;

};

class Prefix : public Visitable
{
public:
  virtual Prefix *clone() const = 0;

};

class Selected_name : public Visitable
{
public:
  virtual Selected_name *clone() const = 0;

};

class Suffix : public Visitable
{
public:
  virtual Suffix *clone() const = 0;

};

class Attribute_name : public Visitable
{
public:
  virtual Attribute_name *clone() const = 0;

};

class Slice_name : public Visitable
{
public:
  virtual Slice_name *clone() const = 0;

};

class Indexed_name : public Visitable
{
public:
  virtual Indexed_name *clone() const = 0;

};

class Character_literal : public Visitable
{
public:
  virtual Character_literal *clone() const = 0;

};

class Graphic_character : public Visitable
{
public:
  virtual Graphic_character *clone() const = 0;

};

class Operator_symbol : public Visitable
{
public:
  virtual Operator_symbol *clone() const = 0;

};

class Simple_name : public Visitable
{
public:
  virtual Simple_name *clone() const = 0;

};



class NameSimple : public Name
{
public:
  Simple_name *simple_name_;

  NameSimple(const NameSimple &);
  NameSimple &operator=(const NameSimple &);
  NameSimple(Simple_name *p1);
  ~NameSimple();
  virtual void accept(Visitor *v);
  virtual NameSimple *clone() const;
  void swap(NameSimple &);
};

class NameOp : public Name
{
public:
  Operator_symbol *operator_symbol_;

  NameOp(const NameOp &);
  NameOp &operator=(const NameOp &);
  NameOp(Operator_symbol *p1);
  ~NameOp();
  virtual void accept(Visitor *v);
  virtual NameOp *clone() const;
  void swap(NameOp &);
};

class NameChar : public Name
{
public:
  Character_literal *character_literal_;

  NameChar(const NameChar &);
  NameChar &operator=(const NameChar &);
  NameChar(Character_literal *p1);
  ~NameChar();
  virtual void accept(Visitor *v);
  virtual NameChar *clone() const;
  void swap(NameChar &);
};

class NameSelected : public Name
{
public:
  Selected_name *selected_name_;

  NameSelected(const NameSelected &);
  NameSelected &operator=(const NameSelected &);
  NameSelected(Selected_name *p1);
  ~NameSelected();
  virtual void accept(Visitor *v);
  virtual NameSelected *clone() const;
  void swap(NameSelected &);
};

class NameIndexed : public Name
{
public:
  Indexed_name *indexed_name_;

  NameIndexed(const NameIndexed &);
  NameIndexed &operator=(const NameIndexed &);
  NameIndexed(Indexed_name *p1);
  ~NameIndexed();
  virtual void accept(Visitor *v);
  virtual NameIndexed *clone() const;
  void swap(NameIndexed &);
};

class NameSlice : public Name
{
public:
  Slice_name *slice_name_;

  NameSlice(const NameSlice &);
  NameSlice &operator=(const NameSlice &);
  NameSlice(Slice_name *p1);
  ~NameSlice();
  virtual void accept(Visitor *v);
  virtual NameSlice *clone() const;
  void swap(NameSlice &);
};

class NameAttr : public Name
{
public:
  Attribute_name *attribute_name_;

  NameAttr(const NameAttr &);
  NameAttr &operator=(const NameAttr &);
  NameAttr(Attribute_name *p1);
  ~NameAttr();
  virtual void accept(Visitor *v);
  virtual NameAttr *clone() const;
  void swap(NameAttr &);
};

class FunctionCallNyadic : public Function_call
{
public:
  Name *name_;

  FunctionCallNyadic(const FunctionCallNyadic &);
  FunctionCallNyadic &operator=(const FunctionCallNyadic &);
  FunctionCallNyadic(Name *p1);
  ~FunctionCallNyadic();
  virtual void accept(Visitor *v);
  virtual FunctionCallNyadic *clone() const;
  void swap(FunctionCallNyadic &);
};

class FunctionCallPolyadic : public Function_call
{
public:
  Name *name_;
  ListAssociation_element *listassociation_element_;

  FunctionCallPolyadic(const FunctionCallPolyadic &);
  FunctionCallPolyadic &operator=(const FunctionCallPolyadic &);
  FunctionCallPolyadic(Name *p1, ListAssociation_element *p2);
  ~FunctionCallPolyadic();
  virtual void accept(Visitor *v);
  virtual FunctionCallPolyadic *clone() const;
  void swap(FunctionCallPolyadic &);
};

class AssocElementPositional : public Association_element
{
public:
  Actual_part *actual_part_;

  AssocElementPositional(const AssocElementPositional &);
  AssocElementPositional &operator=(const AssocElementPositional &);
  AssocElementPositional(Actual_part *p1);
  ~AssocElementPositional();
  virtual void accept(Visitor *v);
  virtual AssocElementPositional *clone() const;
  void swap(AssocElementPositional &);
};

class AssocElementNamedParam : public Association_element
{
public:
  Name *name_;
  Actual_part *actual_part_;

  AssocElementNamedParam(const AssocElementNamedParam &);
  AssocElementNamedParam &operator=(const AssocElementNamedParam &);
  AssocElementNamedParam(Name *p1, Actual_part *p2);
  ~AssocElementNamedParam();
  virtual void accept(Visitor *v);
  virtual AssocElementNamedParam *clone() const;
  void swap(AssocElementNamedParam &);
};

class ActualPartD : public Actual_part
{
public:
  Actual_designator *actual_designator_;

  ActualPartD(const ActualPartD &);
  ActualPartD &operator=(const ActualPartD &);
  ActualPartD(Actual_designator *p1);
  ~ActualPartD();
  virtual void accept(Visitor *v);
  virtual ActualPartD *clone() const;
  void swap(ActualPartD &);
};

class ActualFoo : public Acutal_part
{
public:
  Name *name_;
  Actual_designator *actual_designator_;

  ActualFoo(const ActualFoo &);
  ActualFoo &operator=(const ActualFoo &);
  ActualFoo(Name *p1, Actual_designator *p2);
  ~ActualFoo();
  virtual void accept(Visitor *v);
  virtual ActualFoo *clone() const;
  void swap(ActualFoo &);
};

class ExpressionName : public Expression
{
public:
  Name *name_;

  ExpressionName(const ExpressionName &);
  ExpressionName &operator=(const ExpressionName &);
  ExpressionName(Name *p1);
  ~ExpressionName();
  virtual void accept(Visitor *v);
  virtual ExpressionName *clone() const;
  void swap(ExpressionName &);
};

class ExpressionNumber : public Expression
{
public:
  Integer integer_;

  ExpressionNumber(const ExpressionNumber &);
  ExpressionNumber &operator=(const ExpressionNumber &);
  ExpressionNumber(Integer p1);
  ~ExpressionNumber();
  virtual void accept(Visitor *v);
  virtual ExpressionNumber *clone() const;
  void swap(ExpressionNumber &);
};

class ExpressionDesignator : public Actual_designator
{
public:
  Expression *expression_;

  ExpressionDesignator(const ExpressionDesignator &);
  ExpressionDesignator &operator=(const ExpressionDesignator &);
  ExpressionDesignator(Expression *p1);
  ~ExpressionDesignator();
  virtual void accept(Visitor *v);
  virtual ExpressionDesignator *clone() const;
  void swap(ExpressionDesignator &);
};

class NameDesignator : public Acutal_designator
{
public:
  Name *name_;

  NameDesignator(const NameDesignator &);
  NameDesignator &operator=(const NameDesignator &);
  NameDesignator(Name *p1);
  ~NameDesignator();
  virtual void accept(Visitor *v);
  virtual NameDesignator *clone() const;
  void swap(NameDesignator &);
};

class NamePrefix : public Prefix
{
public:
  Name *name_;

  NamePrefix(const NamePrefix &);
  NamePrefix &operator=(const NamePrefix &);
  NamePrefix(Name *p1);
  ~NamePrefix();
  virtual void accept(Visitor *v);
  virtual NamePrefix *clone() const;
  void swap(NamePrefix &);
};

class FunctionPrefix : public Prefix
{
public:
  Function_call *function_call_;

  FunctionPrefix(const FunctionPrefix &);
  FunctionPrefix &operator=(const FunctionPrefix &);
  FunctionPrefix(Function_call *p1);
  ~FunctionPrefix();
  virtual void accept(Visitor *v);
  virtual FunctionPrefix *clone() const;
  void swap(FunctionPrefix &);
};

class SelectedName : public Selected_name
{
public:
  Prefix *prefix_;
  Suffix *suffix_;

  SelectedName(const SelectedName &);
  SelectedName &operator=(const SelectedName &);
  SelectedName(Prefix *p1, Suffix *p2);
  ~SelectedName();
  virtual void accept(Visitor *v);
  virtual SelectedName *clone() const;
  void swap(SelectedName &);
};

class AllSuffix : public Suffix
{
public:

  AllSuffix(const AllSuffix &);
  AllSuffix &operator=(const AllSuffix &);
  AllSuffix();
  ~AllSuffix();
  virtual void accept(Visitor *v);
  virtual AllSuffix *clone() const;
  void swap(AllSuffix &);
};

class AllSuffixfoo : public Suffix
{
public:

  AllSuffixfoo(const AllSuffixfoo &);
  AllSuffixfoo &operator=(const AllSuffixfoo &);
  AllSuffixfoo();
  ~AllSuffixfoo();
  virtual void accept(Visitor *v);
  virtual AllSuffixfoo *clone() const;
  void swap(AllSuffixfoo &);
};

class NameSuffix : public Suffix
{
public:
  Simple_name *simple_name_;

  NameSuffix(const NameSuffix &);
  NameSuffix &operator=(const NameSuffix &);
  NameSuffix(Simple_name *p1);
  ~NameSuffix();
  virtual void accept(Visitor *v);
  virtual NameSuffix *clone() const;
  void swap(NameSuffix &);
};

class AttributeName : public Attribute_name
{
public:
  Prefix *prefix_;
  Name *name_;

  AttributeName(const AttributeName &);
  AttributeName &operator=(const AttributeName &);
  AttributeName(Prefix *p1, Name *p2);
  ~AttributeName();
  virtual void accept(Visitor *v);
  virtual AttributeName *clone() const;
  void swap(AttributeName &);
};

class SliceName : public Slice_name
{
public:
  Prefix *prefix_;
  Expression *expression_;

  SliceName(const SliceName &);
  SliceName &operator=(const SliceName &);
  SliceName(Prefix *p1, Expression *p2);
  ~SliceName();
  virtual void accept(Visitor *v);
  virtual SliceName *clone() const;
  void swap(SliceName &);
};

class IndexedName : public Indexed_name
{
public:
  Prefix *prefix_;
  ListExpression *listexpression_;

  IndexedName(const IndexedName &);
  IndexedName &operator=(const IndexedName &);
  IndexedName(Prefix *p1, ListExpression *p2);
  ~IndexedName();
  virtual void accept(Visitor *v);
  virtual IndexedName *clone() const;
  void swap(IndexedName &);
};

class CharLiteral : public Character_literal
{
public:
  Char char_;

  CharLiteral(const CharLiteral &);
  CharLiteral &operator=(const CharLiteral &);
  CharLiteral(Char p1);
  ~CharLiteral();
  virtual void accept(Visitor *v);
  virtual CharLiteral *clone() const;
  void swap(CharLiteral &);
};

class GraphicChar : public Graphic_character
{
public:
  Char char_;

  GraphicChar(const GraphicChar &);
  GraphicChar &operator=(const GraphicChar &);
  GraphicChar(Char p1);
  ~GraphicChar();
  virtual void accept(Visitor *v);
  virtual GraphicChar *clone() const;
  void swap(GraphicChar &);
};

class OperatorSymbol : public Operator_symbol
{
public:
  String string_;

  OperatorSymbol(const OperatorSymbol &);
  OperatorSymbol &operator=(const OperatorSymbol &);
  OperatorSymbol(String p1);
  ~OperatorSymbol();
  virtual void accept(Visitor *v);
  virtual OperatorSymbol *clone() const;
  void swap(OperatorSymbol &);
};

class SimpleName : public Simple_name
{
public:
  Ident ident_;

  SimpleName(const SimpleName &);
  SimpleName &operator=(const SimpleName &);
  SimpleName(Ident p1);
  ~SimpleName();
  virtual void accept(Visitor *v);
  virtual SimpleName *clone() const;
  void swap(SimpleName &);
};



class ListAssociation_element : public Visitable, public std::vector<Association_element*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAssociation_element *clone() const;
};

class ListExpression : public Visitable, public std::vector<Expression*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExpression *clone() const;
};



#endif
