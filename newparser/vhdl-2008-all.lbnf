-- BNFC could use a rule for BNF's optional brackets
--

comment "--";

AbsPathname . Absolute_Pathname ::= "." Partial_Pathname;

AbstractLitDec . Abstract_Literal ::= Decimal_Literal;
AbstractLitBased . Abstract_Literal ::= Based_Literal;

AccessTypeDef . Access_Type_Definition ::= "access" Subtype_Indication;

ActualDesignatorInertial . Actual_Designator ::= "inertial" Expression;
ActualDesignatorExp . Actual_Designator ::= Expression;
ActualDesignatorName . Actual_Designator ::= Name;
ActualDesignatorSubtype . Actual_Designator ::= Subtype_Indication;
ActualDesignatorOpen . Actual_Designator ::= "open";

_ . Actual_Parameter_Part ::= Association_List;

ActualPartDesi . Actual_Part ::= Actual_Designator;
ActualPartName . Actual_Part ::= Name "(" Actual_Designator ")";
ActualPartMark . Actual_Part ::= Type_Mark "(" Actual_Designator ")";

AddingOpPlus . Adding_Operator ::= "+";
AddingOpMinus . Adding_Operator ::= "-";
AddingOpConcat . Adding_Operator ::= "&";

separator Element_Association ",";
Aggregate . Aggregate ::= "(" [Element_Association] ")";

AliasDecl . Alias_Declaration ::= "alias" Alias_Designator "is" "name";
AliasDeclSig . Alias_Declaration ::= "alias" Alias_Designator "is" "name" Signature;
AliasDeclType . Alias_Declaration ::= "Alias" Alias_Designator ":" Subtype_Indication "is" "name";
AliasDeclTypeSig . Alias_Declaration ::= "Alias" Alias_Designator ":" Subtype_Indication "is" "name" Signature ;

AliasDesignatorId . Alias_Designator ::= Identifier;
AliasDesignatorChar . Alias_Designator ::= Character_Literal;
AliasDesignatorOp . Alias_Designator ::= Operator_Symbol;

AllocatorSubtype . Allocator ::= "new" Subtype_Indication;
AllocatorQualified . Allocator ::= "new" Qualified_Expression;

ArchitectureBody . Architecture_Body ::=
                 "architecture" Identifier "of" Entity_Name
                 "is" Architecture_Declarative_Part
                 "begin" Architecture_Statement_Part "end";
ArchitectureBodyEA . Architecture_Body ::=
                 "architecture" Identifier "of" Entity_Name
                 "is" Architecture_Declarative_Part
                 "begin" Architecture_Statement_Part "end" "architecture"
ArchitectureBodyEID . Architecture_Body ::=
                 "architecture" Identifier "of" Entity_Name
                 "is" Architecture_Declarative_Part
                 "begin" Architecture_Statement_Part "end" Simple_Name;
ArchitectureBodyEAID . Architecture_Body ::=
                 "architecture" Identifier "of" Entity_Name
                 "is" Architecture_Declarative_Part
                 "begin" Architecture_Statement_Part "end" "architecture" Simple_Name;

terminator Block_Declarative_Item "";
terminator Concurrent_Statement "";

Architecture_Declarative_Part ::= [Block_Declarative_Item];
Architecture_Statement_Part ::= [Concurrent_Statement];

ArrayConstraintIdxcP . Array_Constraint ::= Index_Constraint Array_Element_Constraint;
ArrayConstraintIdxc . Array_Constraint ::= Index_Constraint;
ArrayConstraintOpenP . Array_Constraint ::= "(" "open" ")" Array_Element_Constraint;
ArrayConstraintOpen . Array_Constraint ::= "(" "open" ")";

ArrElemConstrElem . Array_Element_Constraint ::= Element_Constraint;
ArrElemConstrRes . Array_Element_Resolution ::= Resolution_Indication;

ArrayUnboundedDef . Array_Type_Definition ::= Unbounded_Array_Definition;
ArrayConstrainedDef . Array_Type_Definition ::= Constrained_Array_Definition;

Assertion . Assertion ::= "assert" Condition;
Assertion . Assertion ::= "assert" Condition "report" Expression;
Assertion . Assertion ::= "assert" Condition "severity" Expression;
Assertion . Assertion ::= "assert" Condition "report" Expression "severity" Expression;

AssertionStatementLabel . Assertion_Statement ::= Label ":" Assertion ";";
AssertionStatement . Assertion_Statement ::= Assertion ";";

AssocElementBinary . Association_Element ::= Formal_Part "=>" Actual_Part;
AssocElementUnary . Association_Element ::= Actual_Part;

separator AssociationElement ",";

_ . Association_List ::= [AssociationElement];

AttrDecl . Attribute_Declaration ::= "attribute" Identifier ":" Type_Mark ";";

_ . Attribute_Designator ::= Simple_Name;

AttributeName . Attribute_Name ::= Prefix "'" Attribute_Designator;
AttributeNameSig . Attribute_Name ::= Prefix Signature "'" Attribute_Designator;
AttributeNameExp . Attribute_Name ::= Prefix "'" Attribute_Designator "(" Expression ")";
AttributeNameSigExp . Attribute_Name ::= Prefix Signature "'" Attribute_Designator "(" Expression ")";

AttrSpec . Attribute_Specification ::= "attribute" Attribute_Designator "of" Entity_Specification "is" Expression ";";

_ . Base ::= Integer;

token Base_Specifier "("'B' | 'O' | 'X' | 'U' 'b' | 'U' 'o' | 'U' 'x' |
                      'S' 'b' | 'S' 'o' | 'S' 'x' | 'D');

-- TODO: Implement
--
-- Based_Integer ::= Extended_Digit { [ Underline ] Extended_Digit };
-- Based_Literal ::= Base # Based_Integer [ . Based_Integer ] # [ Exponent ]
-- Basic_Character ::= Basic_Graphic_Character | Format_Effector
-- Basic_Graphic_Character ::= Upper_Case_Letter | Digit | Special_Character| Space_Character
-- Bit_String_Literal ::= [ Integer ] Base_Specifier " [ Bit_Value ] "
-- Bit_Value ::= Graphic_Character { [ Underline ] Graphic_Character }

token Based_integer "("'d');
token Based_Literal "("'d');
token Basic_Character "("'d');
token Basic_Graphic_Character "("'d');
token Bit_String_Literal "("'d');
token Bit_Value "("'d');

BindingIndG . Binding_Indication ::= Generic_Map_Aspect ;
BindingIndGP . Binding_Indication ::= Generic_Map_Aspect Port_Map_Aspect;
BindingIndP . Binding_Indication ::= Port_Map_Aspect;
BindingInd . Binding_Indication ::= ;
BindingIndE . Binding_Indication ::= "use" Entity_Aspect ;
BindingIndEG . Binding_Indication ::= "use" Entity_Aspect Generic_Map_Aspect ;
BindingIndEP . Binding_Indication ::= "use" Entity_Aspect Port_Map_Aspect;
BindingIndEGP . Binding_Indication ::= "use" Entity_Aspect Generic_Map_Aspect Port_Map_Aspect;

terminator Use_Clause "";
terminator Configuration_Item "";

Block_Configuration ::= "for" Block_Specification [Use_Clause] [Configuration_Item] "end" "for" ;

BlockDeclItemSubDecl . Block_Declarative_Item ::= Subprogram_Declaration;
BlockDeclItemSubBody . Block_Declarative_Item ::= Subprogram_Body;
BlockDeclItemSubInst . Block_Declarative_Item ::= Subprogram_Instantiation_Declaration;
BlockDeclItemPackDecl . Block_Declarative_Item ::= Package_Declaration;
BlockDeclItemPackBody . Block_Declarative_Item ::= Package_Body;
BlockDeclItemPackInst . Block_Declarative_Item ::= Package_Instantiation_Declaration;
BlockDeclItemTypeDecl . Block_Declarative_Item ::= Type_Declaration;
BlockDeclItemStypeDecl . Block_Declarative_Item ::= Subtype_Declaration;
BlockDeclItemConstDecl . Block_Declarative_Item ::= Constant_Declaration;
BlockDeclItemSigDecl . Block_Declarative_Item ::= Signal_Declaration;
BlockDeclItemShared . Block_Declarative_Item ::= Shared_Variable_Declaration;
BlockDeclItemFile . Block_Declarative_Item ::= File_Declaration;
BlockDeclItemAlias . Block_Declarative_Item ::= Alias_Declaration;
BlockDeclItemComp . Block_Declarative_Item ::= Component_Declaration;
BlockDeclItemAttrDecl . Block_Declarative_Item ::= Attribute_Declaration;
BlockDeclItemAttrSpec . Block_Declarative_Item ::= Attribute_Specification;
BlockDeclItemConfigSpec . Block_Declarative_Item ::= Configuration_Specification;
BlockDeclItemDisconn . Block_Declarative_Item ::= Disconnection_Specification;
BlockDeclItemUse . Block_Declarative_Item ::= Use_Clause;
BlockDeclItemGroupT . Block_Declarative_Item ::= Group_Template_Declaration;
BlockDeclItemGroup . Block_Declarative_Item ::= Group_Declaration;

-- PSL stuff has been omitted

terminator Block_Declarative_Item "";

_ . Block_Declarative_Part ::= [Block_Declarative_Item];

BlockHeader . Block_Header ::= ;
BlockHeaderGeneric . Block_Header ::= BH_temp;
BlockHeaderPortmap . Block_Header ::= BH_temp2;
BlockHeaderGenericPortmap . Block_Header ::= BH_temp BH_temp2;

GenClauseGenMap . BH_temp ::= Generic_Clause Generic_Map_Aspect ";";
GenClause . BH_temp ::= Generic_Clause ";";
PortClausePortMap . BH_temp2 ::= Port_Clause Port_Map_Aspect ";";
PortClause . BH_temp2 ::= Port_Clause ";";

BlockSpecArch . Block_Specification ::= Name;
BlockSpecBlock . Block_Specification ::= Label;
BlockSpecGen . Block_Specification ::= Label;
BlockSpecGenSpec . Block_Specification ::= Label "(" Generate_Specification ")";;

BlockStmt . Block_Statement ::= Label ":" "block"                            Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block" ";";
BlockStmtL . Block_Statement ::= Label ":" "block"                            Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block"  Label ";";
BlockStmtI . Block_Statement ::= Label ":" "block"                      "is"  Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block" ";";
BlockStmtIL . Block_Statement ::= Label ":" "block"                      "is"  Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block"  Label ";";
BlockStmtC . Block_Statement ::= Label ":" "block"  "(" Condition ")"         Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block" ";";
BlockStmtCL . Block_Statement ::= Label ":" "block"  "(" Condition ")"         Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block"  Label ";";
BlockStmtCI . Block_Statement ::= Label ":" "block"  "(" Condition ")"   "is"  Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block" ";";
BlockStmtCIL . Block_Statement ::= Label ":" "block"  "(" Condition ")"   "is"  Block_Header Block_Declarative_Part "begin" Block_Statement_Part "end" "block"  Label ";";

terminator Verification_Unit_Binding_Indication ";";
terminator Concurrent_Statement "";
separator Case_Generate_Alternative "";
separator Case_Statement_Alternative "";
separator nonempty Choice "|";

_ . Block_Statement_Part ::= [Concurrent_Statement];

CaseGenerateAltLabel . Case_Genreate_Alternative ::= "when" Label ":" Choices "=>" Generate_Statement_Body;
CaseGenerateAlt      . Case_Genreate_Alternative ::= "when"           Choices "=>" Generate_Statement_Body;

CaseGenerateStmt . Case_Generate_Statement ::= Label ":" "case" Expression "generate" [Case_Generate_Alternative] "end" "generate";
CaseGenerateStmtLbl . Case_Generate_Statement ::= Label ":" "case" Expression "generate" [Case_Generate_Alternative] "end" "generate" Label ;


CaseStmt       . Case_Statement ::=           "case"     Expression "is" [Case_Statement_Alternative] "end" "case"           ;
CaseStmtQ      . Case_Statement ::=           "case" "?" Expression "is" [Case_Statement_Alternative] "end" "case" "?"       ;
CaseStmtLabel  . Case_Statement ::= Label ":" "case"     Expression "is" [Case_Statement_Alternative] "end" "case"     Label ;
CaseStmtQLabel . Case_Statement ::= Label ":" "case" "?" Expression "is" [Case_Statement_Alternative] "end" "case" "?" Label ;


Case_Statement_Alternative ::= "when" [Choice] "=>" Sequence_Of_Statements;

CharacterLiteral . Character_Literal ::= "'" Graphic_Character "'";


ChoiceExp    . Choice ::= Simple_Expression;
ChoiceRange  . Choice ::= Discrete_Range;
ChoiceName   . Choice ::= Simple_Name;
ChoiceOthers . Choice ::= "others";


ComConfigSimple       . Component_Configuration ::= "for" Component_Specification [Verification_Unit_Binding_Indication] "end" "for" ;
ComConfigBinding      . Component_Configuration ::= "for" Component_Specification Binding_Indication ";" [Verification_Unit_Binding_Indication] "end" "for" ;
ComConfigBlock        . Component_Configuration ::= "for" Component_Specification [Verification_Unit_Binding_Indication] Block_Configuration "end" "for" ;
ComConfigBindingBlock . Component_Configuration ::= "for" Component_Specification Binding_Indication
                                                    ";" [Verification_Unit_Binding_Indication] Block_Configuration "end" "for" ;

CompDecl      . Component_Declaration ::= "component" Identifier                                   "end" "component"             ";"
CompDeclN     . Component_Declaration ::= "component" Identifier                                   "end" "component" simple_name ";"
CompDeclP     . Component_Declaration ::= "component" Identifier                       Port_Clause "end" "component"             ";"
CompDeclPN    . Component_Declaration ::= "component" Identifier                       Port_Clause "end" "component" Simple_Name ";"
CompDeclG     . Component_Declaration ::= "component" Identifier       Generic_Clause              "end" "component"             ";"
CompDeclGN    . Component_Declaration ::= "component" Identifier       Generic_Clause              "end" "component" Simple_Name ";"
CompDeclGP    . Component_Declaration ::= "component" Identifier       Generic_Clause  Port_Clause "end" "component"             ";"
CompDeclGPN   . Component_Declaration ::= "component" Identifier       Generic_Clause  Port_Clause "end" "component" Simple_Name ";"
CompDeclI     . Component_Declaration ::= "component" Identifier "is"                              "end" "component"             ";"
CompDeclIN    . Component_Declaration ::= "component" Identifier "is"                              "end" "component" Simple_Name ";"
CompDeclIP    . Component_Declaration ::= "component" Identifier "is"                  Port_Clause "end" "component"             ";"
CompDeclIPN   . Component_Declaration ::= "component" Identifier "is"                  Port_Clause "end" "component" Simple_Name ";"
CompDeclIG    . Component_Declaration ::= "component" Identifier "is"  Generic_Clause              "end" "component"             ";"
CompDeclIGN   . Component_Declaration ::= "component" Identifier "is"  Generic_Clause              "end" "component" Simple_Name ";"
CompDeclIGP   . Component_Declaration ::= "component" Identifier "is"  Generic_Clause  Port_Clause "end" "component"             ";"
CompDeclIGPN  . Component_Declaration ::= "component" Identifier "is"  Generic_Clause  Port_Clause "end" "component" Simple_Name ";"

CompInstStmt   . Component_Instantiation_Statement ::= Label ":" Instantiated_Unit                                    ";"
CompInstStmtP  . Component_Instantiation_Statement ::= Label ":" Instantiated_Unit                    Port_Map_Aspect ";"
CompInstStmtG  . Component_Instantiation_Statement ::= Label ":" Instantiated_Unit Generic_Map_Aspect                 ";"
CompInstStmtGP . Component_Instantiation_Statement ::= Label ":" Instantiated_Unit Generic_Map_Aspect Port_Map_Aspect ";"

CompSpec . Component_Specification ::= Instantiation_List ":" Name;

CompTypeDefArr . Composite_Type_Definition ::= Array_Type_Definition;
CompTypeDefRec . Composite_Type_Definition ::= Record_Type_Definition;

CompConfigSpec . Compound_Configuration_Specification ::= "for" Component_Specification Binding_Indication ";" Verification_Unit_Binding_Indication
                                                          ";" [Verification_Unit_Binding_Indication] "end" "for" ";";

ConcAssertStmt  . Concurrent_Assertion_Statement ::=           "postponed" Assertion ";";
ConcAssertStmtL . Concurrent_Assertion_Statement ::= Label ":" "postponed" Assertion ";";

ConcCondSigAssign   . Concurrent_Conditional_Signal_Assignment ::= Target "<="                           Conditional_Waveforms ";";
ConcCondSigAssignD  . Concurrent_Conditional_Signal_Assignment ::= Target "<="           Delay_Mechanism Conditional_Waveforms ";";
ConcCondSigAssignG  . Concurrent_Conditional_Signal_Assignment ::= Target "<=" "guarded"                 Conditional_Waveforms ";";
ConcCondSigAssignGD . Concurrent_Conditional_Signal_Assignment ::= Target "<=" "guarded" Delay_Mechanism Conditional_Waveforms ";";

ConcProcCallStmt   . Concurrent_Procedure_Call_Statement ::=                        Procedure_Call ";";
ConcProcCallStmtP  . Concurrent_Procedure_Call_Statement ::=            "postponed" Procedure_Call ";";
ConcProcCallStmtL  . Concurrent_Procedure_Call_Statement ::=  Label ":"             Procedure_Call ";";
ConcProcCallStmtLP . Concurrent_Procedure_Call_Statement ::=  Label ":" "postponed" Procedure_Call ";";

ConcSelSigAssign      . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"       Target "<="                               Selected_Waveforms ";";
ConcSelSigAssignD     . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"       Target "<="              Delay_Mechanism  Selected_Waveforms ";";
ConcSelSigAssignG     . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"       Target "<="  "guarded"                    Selected_Waveforms ";";
ConcSelSigAssignGD    . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"       Target "<="  "guarded"   Delay_Mechanism  Selected_Waveforms ";";
ConcSelSigAssignQ     . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"  "?"  Target "<="                               Selected_Waveforms ";";
ConcSelSigAssignQD    . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"  "?"  Target "<="              Delay_Mechanism  Selected_Waveforms ";";
ConcSelSigAssignGD    . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"  "?"  Target "<="  "guarded"                    Selected_Waveforms ";";
ConcSelSigAssignQGD   . Concurrent_Selected_Signal_Assignment ::= "with" Expression "select"  "?"  Target "<="  "guarded"   Delay_Mechanism  Selected_Waveforms ";";

ConcSigAssignStmtS    . Concurrent_Signal_Assignment_Statement ::=                           Concurrent_Simple_Signal_Assignment;
ConcSigAssignStmtSL   . Concurrent_Signal_Assignment_Statement ::=  Label ":"                Concurrent_Simple_Signal_Assignment;
ConcSigAssignStmtSP   . Concurrent_Signal_Assignment_Statement ::=              "postponed"  Concurrent_Simple_Signal_Assignment;
ConcSigAssignStmtSPL  . Concurrent_Signal_Assignment_Statement ::=  Label ":"   "postponed"  Concurrent_Simple_Signal_Assignment;
ConcSigAssignStmtC    . Concurrent_Signal_Assignment_Statement ::=                           Concurrent_Conditional_Signal_Assignment;
ConcSigAssignStmtCL   . Concurrent_Signal_Assignment_Statement ::=  Label ":"                Concurrent_Conditional_Signal_Assignment;
ConcSigAssignStmtCP   . Concurrent_Signal_Assignment_Statement ::=              "postponed"  Concurrent_Conditional_Signal_Assignment;
ConcSigAssignStmtCPL  . Concurrent_Signal_Assignment_Statement ::=  Label ":"   "postponed"  Concurrent_Conditional_Signal_Assignment;
ConcSigAssignStmtSe   . Concurrent_Signal_Assignment_Statement ::=                           Concurrent_Selected_Signal_Assignment;
ConcSigAssignStmtSeL  . Concurrent_Signal_Assignment_Statement ::=  Label ":"                Concurrent_Selected_Signal_Assignment;
ConcSigAssignStmtSeP  . Concurrent_Signal_Assignment_Statement ::=              "postponed"  Concurrent_Selected_Signal_Assignment;
ConcSigAssignStmtSePL . Concurrent_Signal_Assignment_Statement ::=  Label ":"   "postponed"  Concurrent_Selected_Signal_Assignment;

ConcSimpleSigAss   . Concurrent_Simple_Signal_Assignment ::= Target "<="                           Waveform ";";
ConcSimpleSigAssD  . Concurrent_Simple_Signal_Assignment ::= Target "<="           Delay_Mechanism Waveform ";";
ConcSimpleSigAssG  . Concurrent_Simple_Signal_Assignment ::= Target "<=" "guarded"                 Waveform ";";
ConcSimpleSigAssGD . Concurrent_Simple_Signal_Assignment ::= Target "<=" "guarded" Delay_Mechanism Waveform ";";

ConcurrentStmtBlock . Concurrent_Statement ::= Block_Statement;
ConcurrentStmtProc . Concurrent_Statement ::= Process_Statement;
ConcurrentStmtCall . Concurrent_Statement ::= Concurrent_Procedure_Call_Statement;
ConcurrentStmtAssert . Concurrent_Statement ::= Concurrent_Assertion_Statement;
ConcurrentStmtAssign . Concurrent_Statement ::= Concurrent_Signal_Assignment_Statement;
ConcurrentStmtComp . Concurrent_Statement ::= Component_Instantiation_Statement;
ConcurrentStmtGen . Concurrent_Statement ::= Generate_Statement;
ConcurrentStmtPSL . Concurrent_Statement ::= Psl_Psl_Directive;

_ . Condition ::= Expression


CondClause . Condition_Clause ::= "Until" Condition;

CondOp . Condition_Operator ::= "??";

ConditionalExp     . Conditional_Expressions ::= Expression "when" Condition [Conditional_Exp_Else];
ConditionalExpElse . Conditional_Expressions ::= Expression "when" Condition [Conditional_Exp_Else] "else" Expression;

separator Conditional_Exp_Else "";
CondExpElse . Conditional_Exp_Else ::= "else" Expression "when" Condition;

CondForceAssign  . Conditional_Force_Assignment ::= Target "<=" "force"            Conditional_Expressions ";";
CondForceAssignF . Conditional_Force_Assignment ::= Target "<=" "force" Force_Mode Conditional_Expressions ";";

ConditionalSigAssignWave . Conditional_Signal_Assignment ::= Conditional_Waveform_Assignment;
ConditionalSigAssignForce . Conditional_Signal_Assignment ::= Conditional_Force_Assignment;

Conditional_Variable_Assignment ::= Target ":=" Conditional_Expressions ";";

CondWaveformAssign      . Conditional_Waveform_Assignment ::= Target "<="                 Conditional_Waveforms ";";
CondWaveformAssignDelay . Conditional_Waveform_Assignment ::= Target "<=" Delay_Mechanism Conditional_Waveforms ";";

CondWaveform     . Conditional_Waveforms ::= Waveform "when" Condition [Conditional_Waveform_Temp] ;
CondWaveformElse . Conditional_Waveforms ::= Waveform "when" Condition [Conditional_Waveform_Temp] "else" Waveform;

separator Conditional_Waveform_Temp "";
CondWaveTemp . Conditional_Waveform_Temp ::= "else" Waveform "when" Condition;

ConfigDecl . Configuration_Declaration ::=
           "configuration" Identifier "of" Name "is" Configuration_Declarative_Part Configuration_Declaration_Temp Block_Configuration "end" ";";
ConfigDeclC . Configuration_Declaration ::=
           "configuration" Identifier "of" Name "is" Configuration_Declarative_Part Configuration_Declaration_Temp Block_Configuration "end" "configuration" ";";
ConfigDeclI . Configuration_Declaration ::=
           "configuration" Identifier "of" Name "is" Configuration_Declarative_Part Configuration_Declaration_Temp Block_Configuration "end" Simple_Name ";";
ConfigDeclCI . Configuration_Declaration ::=
           "configuration" Identifier "of" Name "is" Configuration_Declarative_Part Configuration_Declaration_Temp Block_Configuration "end" "configuration" Simple_Name ";";

terminator Verification_Unit_Binding_Indication ";";
_ . Configuration_Declaration_Temp ::= [Verification_Unit_Binding_Indication];

ConfigDeclItemUse   . Configuration_Declarative_Item ::= Use_Clause;
ConfigDeclItemAttr  . Configuration_Declarative_Item ::= Attribute_Specification;
ConfigDeclItemGroup . Configuration_Declarative_Item ::= Group_Declaration;

separator Configuration_Declarative_Item "";
_ . Configuration_Declarative_Part ::= [Configuration_Declarative_Item];

ConfigItemBlock . Configuration_Item ::= Block_Configuration;
ConfigItemComp  . Configuration_Item ::= Component_Configuration;

ConfigSpecSimple   . Configuration_Specification ::= Simple_Configuration_Specification;
ConfigSpecCompound . Configuration_Specification ::= Compound_Configuration_Specification;

ConstDecl     . Constant_Declaration ::= "constant" [Identifier] ":" Subtype_Indication ";";
ConstDeclInit . Constant_Declaration ::= "constant" [Identifier] ":" Subtype_Indication ":=" Expression ";";

ConstrArrDef . Constrained_Array_Definition ::= "array" Index_Constraint "of" Subtype_Indication;

ConstraintRange  . Constraint ::= Range_Constraint;
ConstraintArray  . Constraint ::= Array_Constraint;
ConstraintRecord . Constraint ::= Record_Constraint;

separator Context_Item "";
_ . Context_Clause ::= [Context_Item];

ContextDecl . Context_Declaration ::= "context" Identifier "is"" Context_Clause "end"                       ";";
ContextDecl . Context_Declaration ::= "context" Identifier "is"" Context_Clause "end"           Simple_Name ";";
ContextDecl . Context_Declaration ::= "context" Identifier "is"" Context_Clause "end" "context"             ";";
ContextDecl . Context_Declaration ::= "context" Identifier "is"" Context_Clause "end" "context" Simple_Name ";";

ContextItemLib . Context_Item ::= Library_Clause;
ContextItemUse . Context_Item ::= Use_Clause;
ContextItemCon . Context_Item ::= Context_Reference;

separator nonempty Selected_Name ",";
ContextRef . Context_Reference ::= "context" [Selected_Name] ";";

-- TODO: Make token!
token Decimal_Literal "("'d' 'u' 'm' 'm' 'y');

DelayMechanismTrans    . Delay_Mechanism ::= "transport";
DelayMechanismRej      . Delay_Mechanism ::= "reject" Expression "inertial";
DelayMechanismInertial . Delay_Mechanism ::= "inertial";

separator nonempty Design_Unit "";
_ . Design_File ::= [Design_Unit];

DesignUnit . Design_Unit ::= Context_Clause Library_Unit;

DesignatorId . Designator ::= Identifier;
DesignatorOp . Designator ::= Operator_Symbol;

DirectionTo     . Direction ::= "to";
DirectionDownto . Direction ::= "downto";

DisconnectSpec . Disconnection_Specification ::= "disconnect" Guarded_Signal_Specification "after" Expression ";";

DiscreteRangeSub   . Discrete_Range ::= Subtype_Indication;
DiscreteRangeRange . Discrete_Range ::= Range;

ElementAssocChoice . Element_Association ::= [Choice] "=>" Expression;
ElementAssoc       . Element_Association ::= Expression;

ElementConstraintArr . Element_Constraint ::= Array_Constraint;
ElementConstraintRec . Element_Constraint ::= Record_Constraint;

ElementDecl . Element_Declaration ::= [Identifier] ":" Element_Subtype_Definition ";";

ElementResolutionArr . Element_Resolution ::= Array_Element_Resolution;
ElementResolutionRec . Element_Resolution ::= Record_Resolution;

_ . Element_Subtype_Definition ::= Subtype_Indication;

EntityAspect . Entity_Aspect ::= "entity" Name;
EntityAspect . Entity_Aspect ::= "entity" Name "(" Identifier ")";
EntityAspect . Entity_Aspect ::= "configuration" Name;
EntityAspect . Entity_Aspect ::= "open";

EntityClassEnt      . Entity_Class ::= "entity";
EntityClassArch     . Entity_Class ::= "architecture";
EntityClassConf     . Entity_Class ::= "configuration";
EntityClassProc     . Entity_Class ::= "procedure";
EntityClassFunc     . Entity_Class ::= "function";
EntityClassPack     . Entity_Class ::= "package";
EntityClassType     . Entity_Class ::= "type";
EntityClassSubt     . Entity_Class ::= "subtype";
EntityClassConst    . Entity_Class ::= "constant";
EntityClassSig      . Entity_Class ::= "signal";
EntityClassVar      . Entity_Class ::= "variable";
EntityClassComp     . Entity_Class ::= "component";
EntityClassLab      . Entity_Class ::= "label";
EntityClassLiteral  . Entity_Class ::= "literal";
EntityClassUnits    . Entity_Class ::= "units";
EntityClassGroup    . Entity_Class ::= "group";
EntityClassFile     . Entity_Class ::= "file";
EntityClassProp     . Entity_Class ::= "property";
EntityClassSequence . Entity_Class ::= "sequence";

EntityClassEntryBox . Entity_Class_Entry ::= Entity_Class "<>";
EntityClassEntry    . Entity_Class_Entry ::= Entity_Class;

separator Entity_Class_Entry ",";
Entity_Class_Entry_List ::= [Entity_Class_Entry];

EntityDecl        . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part                               "end"                      ";";
EntityDeclLabel   . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part                               "end"          Simple_Name ";";
EntityDeclE       . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part                               "end" "entity"             ";";
EntityDeclELabel  . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part                               "end" "entity" Simple_Name ";";
EntityDeclS       . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part "begin" Entity_Statement_Part "end"                      ";";
EntityDeclSLabel  . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part "begin" Entity_Statement_Part "end"          Simple_Name ";";
EntityDeclSE      . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part "begin" Entity_Statement_Part "end" "entity"             ";";
EntityDeclSELabel . Entity_Declaration ::= "entity" Identifier "is" Entity_Header Entity_Declarative_Part "begin" Entity_Statement_Part "end" "entity" Simple_Name ";";

EntityDeclItermSubprogDecl . Entity_Declarative_Iterm ::= Subprogram_Declaration;
EntityDeclItermSubprogBody . Entity_Declarative_Iterm ::= Subprogram_Body;
EntityDeclItermSubprogInst . Entity_Declarative_Iterm ::= Subprogram_Instantiation_Declaration;
EntityDeclItermPackageDecl . Entity_Declarative_Iterm ::= Package_Declaration;
EntityDeclItermPackageBody . Entity_Declarative_Iterm ::= Package_Body;
EntityDeclItermPackageInst . Entity_Declarative_Iterm ::= Package_Instantiation_Declaration;
EntityDeclItermTypeDecl    . Entity_Declarative_Iterm ::= Type_Declaration;
EntityDeclItermSubtypeDecl . Entity_Declarative_Iterm ::= Subtype_Declaration;
EntityDeclItermConstDecl   . Entity_Declarative_Iterm ::= Constant_Declaration;
EntityDeclItermSigDecl     . Entity_Declarative_Iterm ::= Signal_Declaration;
EntityDeclItermShared      . Entity_Declarative_Iterm ::= Shared_Variable_Declaration;
EntityDeclItermFile        . Entity_Declarative_Iterm ::= File_Declaration;
EntityDeclItermAlias       . Entity_Declarative_Iterm ::= Alias_Declaration;
EntityDeclItermAttrDecl    . Entity_Declarative_Iterm ::= Attribute_Declaration;
EntityDeclItermAttrSpec    . Entity_Declarative_Iterm ::= Attribute_Specification;
EntityDeclItermDisconn     . Entity_Declarative_Iterm ::= Disconnection_Specification;
EntityDeclItermUse         . Entity_Declarative_Iterm ::= Use_Clause;
EntityDeclItermGroupTemp   . Entity_Declarative_Iterm ::= Group_Template_Declaration;
EntityDeclItermGroup       . Entity_Declarative_Iterm ::= Group_Declaration;

terminator Entity_Declarative_Item "";
_ . Entity_Declarative_Part ::= [Entity_Declarative_Item];

EntityDesignator . Entity_Designator ::= Entity_Tag;
EntityDesignator . Entity_Designator ::= Entity_Tag Signature;

EntityHeader   . Entity_Header ::= ;
EntityHeaderP  . Entity_Header ::= Formal_Port_Clause;
EntityHeaderG  . Entity_Header ::= Formal_Generic_Clause ;
EntityHeaderGP . Entity_Header ::= Formal_Generic_Clause Formal_Port_Clause;

separator nonempty Entity_Designator ",";

EntityNameListD . Entity_Name_List ::= [Entity_Designator];
EntityNameListO . Entity_Name_List ::= "others";
EntityNameListA . Entity_Name_List ::= "all";

EntitySpec . Entity_Specification ::= Entity_Name_List ":" Entity_Class;

EntityStmtConc . Entity_Statement ::= Concurrent_Assertion_Statement;
EntityStmtPassiveConc . Entity_Statement ::= Concurrent_Procedure_Call_Statement;
EntityStmtPassiveProc . Entity_Statement ::= Process_Statement;

terminator Entity_Statement "";
_ . Entity_Statement_Part ::= [Entity_Statement];

EntityTagName . Entity_Tag ::= Simple_Name;
EntityTagChar . Entity_Tag ::= Character_Literal;
EntityTagOp   . Entity_Tag ::= Operator_Symbol;

EnumLit . Enumeration_Literal ::= Identifier;
EnumLit . Enumeration_Literal ::= Character_Literal;

separator nonempty Enumeration_Literal ",";
Enumeration_Type_Definition ::= "(" [Enumeration_Literal] ")";

ExitStmt   . Exit_Statement ::=           "exit"                        ";";
ExitStmtW  . Exit_Statement ::=           "exit"       "when" Condition ";";
ExitStmtL  . Exit_Statement ::=           "exit" Label                  ";";
ExitStmtLW . Exit_Statement ::=           "exit" Label "when" Condition ";";
ExitStmtL  . Exit_Statement ::= Label ":" "exit"                        ";";
ExitStmtLW . Exit_Statement ::= Label ":" "exit"       "when" Condition ";";
ExitStmtLL . Exit_Statement ::= Label ":" "exit" Label                  ";";
ExitStmtLLW. Exit_Statement ::= Label ":" "exit" Label "when" Condition ";";

ExponentPlus  . Exponent ::= "e" "+" Integer;
Exponent      . Exponent ::= "e" Integer;
ExponentMinus . Exponent ::= "e" "–" Integer;

ExpCondition . Expression ::= Condition_Operator Primary;
ExpLogical   . Expression ::= Logical_Expression;

ExtDigitDig    . Extended_Digit ::= Digit;
ExtDigitLetter . Extended_Digit ::= Letter;

ExternalNameConst . External_Name ::= External_Constant_Name;
ExternalNameSig   . External_Name ::= External_Signal_Name;
ExternalNameVar   . External_Name ::= External_Variable_Name;

ExtConstName . External_Constant_Name ::= "<<" "constant" External_Pathname ":" Subtype_Indication ">>";

ExtSigName . External_Signal_Name ::= "<<" "signal" External_Pathname ":" Subtype_Indication ">>";

ExtVarName . External_Variable_Name ::= "<<" "variable" External_Pathname ":" Subtype_Indication ">>";

ExternalPathnamePackage  . External_Pathname ::= Package_Pathname;
ExternalPathnameAbsolute . External_Pathname ::= Absolute_Pathname;
ExternalPathnameRelative . External_Pathname ::= Relative_Pathname;

FactorPow . Factor ::= Primary "**" Primary;
FactorSim . Factor ::= Primary ;
FactorAbs . Factor ::= "abs" Primary;
FactorNot . Factor ::= "not" Primary;
FactorLog . Factor ::= Logical_Operator Primary;

FileDecl         . File_Declaration ::= "file" [Identifier] ":" Subtype_Indication;
FileDeclOpeninfo . File_Declaration ::= "file" [Identifier] ":" Subtype_Indication File_Open_Information;

_ . File_Logical_Name ::= Expression;

FileOpenInfo     . File_Open_Information ::= "is" File_Logical_Name;
FileOpenInfoOpen . File_Open_Information ::= "open" File_Open_Kind_Expression "is" File_Logical_Name;

FileTypDef . File_Type_Definition ::= "file" "of" Type_Mark;

_ . Floating_Type_Definition ::= Range_Constraint;

ForGenStmt  . For_Generate_Statement ::= Label ":" "for" Parameter_Specification "generate" Generate_Statement_Body "end" "generate";
ForGenStmtL . For_Generate_Statement ::= Label ":" "for" Parameter_Specification "generate" Generate_Statement_Body "end" "generate" Generate_Label;

ForceModeIn  . Force_Mode ::= "In";
ForceModeOut . Force_Mode ::= "Out";

FormalDesignatorGeneric . Formal_Designator ::= Generic_Name;
FormalDesignatorPort    . Formal_Designator ::= Port_Name;
FormalDesignatorParam   . Formal_Designator ::= Parameter_Name;

_ . Formal_Parameter_List ::= Interface_List;

FormalPartFd   . Formal_Part ::= Formal_Designator;
FormalPartFunc . Formal_Part ::= Name "(" Formal_Designator ")";
FormalPartType . Formal_Part ::= Type_Mark "(" Formal_Designator ")";

FullTypeDecl . Full_Type_Declaration ::= "type" Identifier "is" Type_Definition ";";

FuncCallNyad   . Function_Call ::= Function_Name;
FuncCallPolyad . Function_Call ::= Function_Name "(" Actual_Parameter_Part ")"

FuncSpec000 . Function_Specification ::=          "function" Designator Subprogram_Header                                           "return" Type_Mark;
FuncSpec001 . Function_Specification ::=          "function" Designator Subprogram_Header             "(" Formal_Parameter_List ")" "return" Type_Mark;
FuncSpec011 . Function_Specification ::=          "function" Designator Subprogram_Header "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;
FuncSpecp00 . Function_Specification ::= "pure"   "function" Designator Subprogram_Header                                           "return" Type_Mark;
FuncSpeci00 . Function_Specification ::= "impure" "function" Designator Subprogram_Header                                           "return" Type_Mark;
FuncSpecp01 . Function_Specification ::= "pure"   "function" Designator Subprogram_Header             "(" Formal_Parameter_List ")" "return" Type_Mark;
FuncSpeci01 . Function_Specification ::= "impure" "function" Designator Subprogram_Header             "(" Formal_Parameter_List ")" "return" Type_Mark;
FuncSpecp10 . Function_Specification ::= "pure"   "function" Designator Subprogram_Header "parameter"                               "return" Type_Mark;
FuncSpeci10 . Function_Specification ::= "impure" "function" Designator Subprogram_Header "parameter"                               "return" Type_Mark;
FuncSpecp11 . Function_Specification ::= "pure"   "function" Designator Subprogram_Header "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;
FuncSpeci11 . Function_Specification ::= "impure" "function" Designator Subprogram_Header "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;

GenerateSpecRange . Generate_Specification ::= Discrete_Range;
GenerateSpecExpr  . Generate_Specification ::= Expression;
GenerateSpecLabel . Generate_Specification ::= Label;

GenStmtFor  . Generate_Statement ::= For_Generate_Statement;
GenStmtIf   . Generate_Statement ::= If_Generate_Statement;
GenStmtCase . Generate_Statement ::= Case_Generate_Statement;

GenStmtBody    . Generate_Statement_Body ::=                                [Concurrent_Statement] ;
GenStmtBodyE   . Generate_Statement_Body ::=                                [Concurrent_Statement] "end" ";";
GenStmtBodyEL  . Generate_Statement_Body ::=                                [Concurrent_Statement] "end" Label ";";
GenStmtBodyB   . Generate_Statement_Body ::= Block_Declarative_Part "begin" [Concurrent_Statement] ;
GenStmtBodyBE  . Generate_Statement_Body ::= Block_Declarative_Part "begin" [Concurrent_Statement] "end" ";";
GenStmtBodyBEL . Generate_Statement_Body ::= Block_Declarative_Part "begin" [Concurrent_Statement] "end" Label ";";

GenericClause . Generic_Clause ::= "generic" "(" Generic_List ")" ;

_ . Generic_List ::= Interface_List;

GenMapAspect . Generic_Map_Aspect ::= "generic" "map" "(" Association_List ")";

GraphicCharB . Graphic_Character ::= Basic_Graphic_Character;
GraphicCharL . Graphic_Character ::= Lower_Case_Letter;
GraphicCharO . Graphic_Character ::= Other_Special_Character;

GroupConstituentName    . Group_Constituent ::= Name;
GroupConstituentCharlit . Group_Constituent ::= Character_Literal;

separator nonempty Group_Constituent ",";
_ . Group_Constituent_List ::= [Group_Constituent];

GroupDecl . Group_Declaration ::= "group" Identifier ":" Name "(" Group_Constituent_List ")" ;

GroupTempDecl . Group_Template_Declaration ::= "group" Identifier "is" "(" Entity_Class_Entry_List ")" ;

Guarded_Signal_Specification ::= Signal_List ":" Type_Mark;

IdentifierBasic    . Identifier ::= Basic_Identifier;
IdentifierExtended . Identifier ::= Extended_Identifier;

-- Basic_Identifier ::=
-- Letter { [ Underline ] Letter_Or_Digit }
-- Extended_Identifier ::=
-- \ Graphic_Character { Graphic_Character } \

token Basic_Identifier "("'d');
token Extended_Identifier "("'d');

separator Identifier ",";

If_Generate_Statement ::= Label ":" "if"           Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts]             "end" "Generate"                ";";
If_Generate_Statement ::= Label ":" "if"           Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts]             "end" "Generate" Generate_Label ";";
If_Generate_Statement ::= Label ":" "if"           Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts] ElseGenPart "end" "Generate"                ";";
If_Generate_Statement ::= Label ":" "if"           Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts] ElseGenPart "end" "Generate" Generate_Label ";";
If_Generate_Statement ::= Label ":" "if" Label ":" Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts]             "end" "Generate"                ";";
If_Generate_Statement ::= Label ":" "if" Label ":" Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts]             "end" "Generate" Generate_Label ";";
If_Generate_Statement ::= Label ":" "if" Label ":" Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts] ElseGenPart "end" "Generate"                ";";
If_Generate_Statement ::= Label ":" "if" Label ":" Condition "generate" Generate_Statement_Body [Elsif_Generate_Parts] ElseGenPart "end" "Generate" Generate_Label ";";

separator Elsif_Generate_Parts "";
ElsifGenPartsLab . Elsif_Generate_Parts ::= "elsif" Label ":" Condition "generate" Generate_Statement_Body;
ElsifGenParts    . Elsif_Generate_Parts ::= "elsif"           Condition "generate" Generate_Statement_Body;

ElseGenPartLabel . Else_Gen_Part ::= "else" Label ":" Generate Generate_Statement_Body;
ElseGenPart      . Else_Gen_Part ::= "else"           Generate Generate_Statement_Body;

IfStatement   . If_Statement ::=           "if" Condition "then" [Sequential_Statement] [Elsif_Parts]                               "end" "if"       ";";
IfStatementL  . If_Statement ::= Label ":" "if" Condition "then" [Sequential_Statement] [Elsif_Parts]                               "end" "if" Label ";";
IfStatementE  . If_Statement ::=           "if" Condition "then" [Sequential_Statement] [Elsif_Parts] "else" [Sequential_Statement] "end" "if"       ";";
IfStatementLE . If_Statement ::= Label ":" "if" Condition "then" [Sequential_Statement] [Elsif_Parts] "else" [Sequential_Statement] "end" "if" Label ";";

terminator Elsif_Parts "";
ElsifParts . Elsif_Parts ::= "elsif" Condition "then" [Sequential_Statement];

IncompleteTypeDecl . Incomplete_Type_Declaration ::= "type" Identifier ";";

separator nonempty Discrete_Range ",";
IndexConstraint . Index_Constraint ::= "(" [Discrete_Range] ")";

IndexSubtDef . Index_Subtype_Definition ::= Type_Mark "range" "<>";

separator nonempty Expression ",";
Indexed_Name ::= Prefix "(" [Expression] ")";

InstantiatedUnitN  . Instantiated_Unit ::= Name;
InstantiatedUnitC  . Instantiated_Unit ::= "component" Name;
InstantiatedUnitE  . Instantiated_Unit ::= "entity" Name ;
InstantiatedUnitEI . Instantiated_Unit ::= "entity" Name "(" Identifier ")";
InstantiatedUnitC  . Instantiated_Unit ::= "configuration" Name;

separator nonempty Instantiation_Label "";
InstListI . Instantiation_List ::= [Instantiation_Label];
InstListO . Instantiation_List ::= "others";
InstListA . Instantiation_List ::= "all";

-- TODO: Token!
Integer ::= Digit { [ Underline ] Digit }

_ . Integer_Type_Definition ::= Range_Constraint;

InterConstDecl . Interface_Constant_Declaration ::= [Identifier] : "in" Subtype_Indication ;
InterConstDecl . Interface_Constant_Declaration ::= [Identifier] : "in" Subtype_Indication ":=" Static_Expression;
InterConstDecl . Interface_Constant_Declaration ::= "constant" [Identifier] : "in" Subtype_Indication ;
InterConstDecl . Interface_Constant_Declaration ::= "constant" [Identifier] : "in" Subtype_Indication ":=" Static_Expression;

Interface_Declaration ::=
InterfaceDecl . Interface_Declaration ::= Interface_Object_Declaration;
InterfaceDecl . Interface_Declaration ::= Interface_Type_Declaration;
InterfaceDecl . Interface_Declaration ::= Interface_Subprogram_Declaration;
InterfaceDecl . Interface_Declaration ::= Interface_Package_Declaration;

_ . Interface_Element ::= Interface_Declaration;

Interface_File_Declaration ::= File [Identifier] ":" Subtype_Indication;

Interface_Function_Specification ::= "function" Designator  "return" Type_Mark;
Interface_Function_Specification ::= "function" Designator  "(" Formal_Parameter_List ")" "return" Type_Mark;
Interface_Function_Specification ::= "function" Designator "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;
Interface_Function_Specification ::= "function" Designator "return" Type_Mark;
Interface_Function_Specification ::= "pure" "function" Designator "return" Type_Mark;
Interface_Function_Specification ::= "impure" "function" Designator "return" Type_Mark;
Interface_Function_Specification ::= "pure" "function" Designator  "(" Formal_Parameter_List ")" "return" Type_Mark;
Interface_Function_Specification ::= "impure" "function" Designator  "(" Formal_Parameter_List ")" "return" Type_Mark;
Interface_Function_Specification ::= "pure" "function" Designator "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;
Interface_Function_Specification ::= "impure" "function" Designator "parameter" "(" Formal_Parameter_List ")" "return" Type_Mark;

_ . Interface_Incomplete_Type_Declaration ::= type Identifier;

separator nonempty Interface_Element ";";
Interface_List ::= [Interface_Element]

Interface_Object_Declaration ::=
InterObjDeclConst . Interface_Object_Declaration ::= Interface_Constant_Declaration;
InterObjDeclSig . Interface_Object_Declaration ::= Interface_Signal_Declaration;
InterObjDeclVar . Interface_Object_Declaration ::= Interface_Variable_Declaration;
InterObjDeclFile . Interface_Object_Declaration ::= Interface_File_Declaration;

InterPackDecl . Interface_Package_Declaration ::= "package" Identifier "is" "new" Name Interface_Package_Generic_Map_Aspect;

InterPackGenMapAspectG . Interface_Package_Generic_Map_Aspect ::= Generic_Map_Aspect;
InterPackGenMapAspectB . Interface_Package_Generic_Map_Aspect ::= Generic Map "(" "<>" ")";
InterPackGenMapAspectD . Interface_Package_Generic_Map_Aspect ::= Generic Map "(" "default" ")";

Interface_Procedure_Specification ::= "procedure" Designator [ [ "parameter" ] "(" Formal_Parameter_List ")" ]

InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":"      Subtype_Indication                                     ;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":"      Subtype_Indication       ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":"      Subtype_Indication "bus"                           ;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":"      Subtype_Indication "bus" ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":" Mode Subtype_Indication                                     ;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":" Mode Subtype_Indication       ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":" Mode Subtype_Indication "bus"                           ;
InterSigDecl . Interface_Signal_Declaration ::=        [Identifier] ":" Mode Subtype_Indication "bus" ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":"          Subtype_Indication                                     ;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":"          Subtype_Indication           ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":"          Subtype_Indication "bus"                           ;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":"          Subtype_Indication "bus" ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":" Mode Subtype_Indication                                     ;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":" Mode Subtype_Indication           ":=" Static_Expression;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":" Mode Subtype_Indication "bus"                           ;
InterSigDecl . Interface_Signal_Declaration ::= signal [Identifier] ":" Mode Subtype_Indication "bus" ":=" Static_Expression;

InterfaceSubDecl . Interface_Subprogram_Declaration ::= Interface_Subprogram_Specification ;
InterfaceSubDeclDefault . Interface_Subprogram_Declaration ::= Interface_Subprogram_Specification "is" Interface_Subprogram_Default;

InterfaceSubDefaultName . Interface_Subprogram_Default ::= Name;
InterfaceSubDefaultBox . Interface_Subprogram_Default ::= "<>";

Interface_Subprogram_Specification ::=
Interface_Procedure_Specification | Interface_Function_Specification

Interface_Type_Declaration ::=
Interface_Incomplete_Type_Declaration

Interface_Variable_Declaration ::=
[ Variable ] [Identifier] : [ Mode ] Subtype_Indication [ := Static_Expression ]

IterSchemeWhile . Iteration_Scheme ::= "while" Condition;
IterSchemeFor . Iteration_Scheme ::= "for" Parameter_Specification;

_ . Label ::= Identifier

Letter ::=
Upper_Case_Letter | Lower_Case_Letter

LetterOrDigitLetter . Letter_Or_Digit ::= Letter
LetterOrDigitDigit . Letter_Or_Digit ::= Digit

LibClause . Library_Clause ::= Library Logical_Name_List ";"

LibUnitPrim . Library_Unit ::= Primary_Unit;
LibUnitSec . Library_Unit ::= Secondary_Unit;

Literal ::=
LiteralNum . Literal ::= Numeric_Literal;
LiteralEnum . Literal ::= Enumeration_Literal;
LiteralStr . Literal ::= String_Literal;
LiteralBitstr . Literal ::= Bit_String_Literal;
LiteralNull . Literal ::= "null";

-- TODO:
LogExpr . Logical_Expression ::= Relation { And Relation };
LogExpr . Logical_Expression ::= Relation { Or Relation };
LogExpr . Logical_Expression ::= Relation { Xor Relation };
LogExpr . Logical_Expression ::= Relation [ Nand Relation ];
LogExpr . Logical_Expression ::= Relation [ Nor Relation ];
LogExpr . Logical_Expression ::= Relation { Xnor Relation };

_ . Logical_Name ::= Identifier;

separator nonempty Logical_Name ",";
Logical_Name_List ::= [Logical_Name];

LogOpAnd . Logical_Operator ::= "and";
LogOpOr . Logical_Operator ::= "or";
LogOpNand . Logical_Operator ::= "nand";
LogOpNor . Logical_Operator ::= "nor";
LogOpXor . Logical_Operator ::= "xor";
LogOpXnor . Logical_Operator ::= "xnor";

LoopStmt . Loop_Statement ::=                                "loop" Sequence_Of_Statements "end" "loop"           ";";
LoopStmtL . Loop_Statement ::=                                "loop" Sequence_Of_Statements "end" "loop"  Label  ";";
LoopStmtI . Loop_Statement ::=              Iteration_Scheme  "loop" Sequence_Of_Statements "end" "loop"           ";";
LoopStmtIL . Loop_Statement ::=              Iteration_Scheme  "loop" Sequence_Of_Statements "end" "loop"  Label  ";";
LoopStmtL . Loop_Statement ::=  Label ":"                     "loop" Sequence_Of_Statements "end" "loop"           ";";
LoopStmtLL  . Loop_Statement ::=  Label ":"                     "loop" Sequence_Of_Statements "end" "loop"  Label  ";";
LoopStmtLI  . Loop_Statement ::=  Label ":"   Iteration_Scheme  "loop" Sequence_Of_Statements "end" "loop"           ";";
LoopStmtLIL . Loop_Statement ::=  Label ":"   Iteration_Scheme  "loop" Sequence_Of_Statements "end" "loop"  Label  ";";

MiscOp . Miscellaneous_Operator ::= "**";
MiscOp . Miscellaneous_Operator ::= "Abs";
MiscOp . Miscellaneous_Operator ::= "Not";

Mode ::= "In" | "Out" | "Inout" | "Buffer" | "Linkage";

MultOpMul . Multiplying_Operator ::= "*";
MultOpDiv . Multiplying_Operator ::= "/";
MultOpMod . Multiplying_Operator ::= "mod";
MultOpRem . Multiplying_Operator ::= "Rem";

NameSimple . Name ::= Simple_Name;
NameOperator . Name ::= Operator_Symbol;
NameChar . Name ::= Character_Literal;
NameSelected . Name ::= Selected_Name;
NameIndexed . Name ::= Indexed_Name;
NamSlice . Name ::= Slice_Name;
NameAttr . Name ::= Attribute_Name;
NameExt . Name ::= External_Name;

-- second label is for loops
NextStmt . Next_Statement ::=               "next"                                ";";
NextStmtC . Next_Statement ::=               "next"            "when" Condition  ";";
NextStmtL . Next_Statement ::=               "next"  Label                       ";";
NextStmtLC . Next_Statement ::=               "next"  Label   "when" Condition  ";";
NextStmtL . Next_Statement ::=  Label ":"  "next"                                ";";
NextStmtLC . Next_Statement ::=  Label ":"  "next"            "when" Condition  ";";
NextStmtLL . Next_Statement ::=  Label ":"  "next"  Label                       ";";
NextStmtLLC . Next_Statement ::=  Label ":"  "next"  Label   "when" Condition  ";";

NullStmt . Null_Statement ::= ":" "null" ";";
NullStmtLab . Null_Statement ::= Label ":" "null" ";";

NumLiteralAbstract . Numeric_Literal ::= Abstract_Literal;
NumLiteralPhysical . Numeric_Literal ::= Physical_Literal;

ObjDeclConst . Object_Declaration ::= Constant_Declaration;
ObjDeclSig . Object_Declaration ::= Signal_Declaration;
ObjDeclVar . Object_Declaration ::= Variable_Declaration;
ObjDeclFile . Object_Declaration ::= File_Declaration;

-- TODO: Token!
_ . Operator_Symbol ::= String_Literal;

PackBody . Package_Body ::= "package" "body" Simple_Name "is" Package_Body_Declarative_Part "end"                                      ";";
PackBodyL . Package_Body ::= "package" "body" Simple_Name "is" Package_Body_Declarative_Part "end"                       Simple_Name  ";";
PackBodyP . Package_Body ::= "package" "body" Simple_Name "is" Package_Body_Declarative_Part "end"  "package" "body"                  ";";
PackBodyPL . Package_Body ::= "package" "body" Simple_Name "is" Package_Body_Declarative_Part "end"  "package" "body"   Simple_Name  ";";

PackBodyDeclItemSDecl . Package_Body_Declarative_Item ::= Subprogram_Declaration;
PackBodyDeclItemSBody . Package_Body_Declarative_Item ::= Subprogram_Body;
PackBodyDeclItemSInst . Package_Body_Declarative_Item ::= Subprogram_Instantiation_Declaration;
PackBodyDeclItemPDecl . Package_Body_Declarative_Item ::= Package_Declaration;
PackBodyDeclItemPBody . Package_Body_Declarative_Item ::= Package_Body;
PackBodyDeclItemPInst . Package_Body_Declarative_Item ::= Package_Instantiation_Declaration;
PackBodyDeclItemTDecl . Package_Body_Declarative_Item ::= Type_Declaration;
PackBodyDeclItemSDecl . Package_Body_Declarative_Item ::= Subtype_Declaration;
PackBodyDeclItemCDecl . Package_Body_Declarative_Item ::= Constant_Declaration;
PackBodyDeclItemVDecl . Package_Body_Declarative_Item ::= Variable_Declaration;
PackBodyDeclItemFDecl . Package_Body_Declarative_Item ::= File_Declaration;
PackBodyDeclItemADecl . Package_Body_Declarative_Item ::= Alias_Declaration;
PackBodyDeclItemAtDecl . Package_Body_Declarative_Item ::= Attribute_Declaration;
PackBodyDeclItemASpec . Package_Body_Declarative_Item ::= Attribute_Specification;
PackBodyDeclItemUC . Package_Body_Declarative_Item ::= Use_Clause;
PackBodyDeclItemGT . Package_Body_Declarative_Item ::= Group_Template_Declaration;
PackBodyDeclItemGDecl . Package_Body_Declarative_Item ::= Group_Declaration;

separator Package_Body_Declarative_Item "";
_ . Package_Body_Declarative_Part ::= [Package_Body_Declarative_Item];

PackageDecl . Package_Declaration ::= "package" Identifier "is" Package_Header Package_Declarative_Part "end"                        ";";
PackageDecl . Package_Declaration ::= "package" Identifier "is" Package_Header Package_Declarative_Part "end"           Simple_Name  ";";
PackageDecl . Package_Declaration ::= "package" Identifier "is" Package_Header Package_Declarative_Part "end" "package"              ";";
PackageDecl . Package_Declaration ::= "package" Identifier "is" Package_Header Package_Declarative_Part "end" "package" Simple_Name  ";";

PackDeclItemSd . Package_Declarative_Item ::= Subprogram_Declaration;
PackDeclItemSi . Package_Declarative_Item ::= Subprogram_Instantiation_Declaration;
PackDeclItemPd . Package_Declarative_Item ::= Package_Declaration;
PackDeclItemPi . Package_Declarative_Item ::= Package_Instantiation_Declaration;
PackDeclItemTd . Package_Declarative_Item ::= Type_Declaration;
PackDeclItemSde . Package_Declarative_Item ::= Subtype_Declaration;
PackDeclItemCd . Package_Declarative_Item ::= Constant_Declaration;
PackDeclItemSigd . Package_Declarative_Item ::= Signal_Declaration;
PackDeclItemVard . Package_Declarative_Item ::= Variable_Declaration;
PackDeclItemFd . Package_Declarative_Item ::= File_Declaration;
PackDeclItemAld . Package_Declarative_Item ::= Alias_Declaration;
PackDeclItemComd . Package_Declarative_Item ::= Component_Declaration;
PackDeclItemAttD . Package_Declarative_Item ::= Attribute_Declaration;
PackDeclItemAttS . Package_Declarative_Item ::= Attribute_Specification;
PackDeclItemDs . Package_Declarative_Item ::= Disconnection_Specification;
PackDeclItemUseC . Package_Declarative_Item ::= Use_Clause;
PackDeclItemGt . Package_Declarative_Item ::= Group_Template_Declaration;
PackDeclItemGd . Package_Declarative_Item ::= Group_Declaration;
PackDeclItemPPd . Package_Declarative_Item ::= Psl_Property_Declaration;
PackDeclItemPSD . Package_Declarative_Item ::= Psl_Sequence_Declaration;

terminator Package_Declarative_Item "";
Package_Declarative_Part ::= [Package_Declarative_Item];

PackageHeader . Package_Header ::= ;
PackageHeader . Package_Header ::=  Generic_Clause ";";
PackageHeader . Package_Header ::=  Generic_Clause  Generic_Map_Aspect ";"  ;

PackInstDecl . Package_Instantiation_Declaration ::= "package" Identifier "is" "new" Uninstantiated_Package_Name ";";
PackInstDeclMap . Package_Instantiation_Declaration ::= "package" Identifier "is" "new" Uninstantiated_Package_Name Generic_Map_Aspect ";";

-- TODO: impl
Package_Pathname ::= "@" Logical_Name "." { Simple_Name "." } Simple_Name;
-- ENDTODO

ParamSpec . Parameter_Specification ::= Identifier "in" Discrete_Range;

Partial_Pathname ::= { Pathname_Element "." } Simple_Name

PathnameElemSname . Pathname_Element ::= Simple_Name;
PathnameElemComp . Pathname_Element ::= Component_Instantiation_Label;
PathnameElemBlock . Pathname_Element ::= Block_Label;
PathnameElemGen . Pathname_Element ::= Generate_Statement_Label ;
PathnameElemGenE . Pathname_Element ::= Generate_Statement_Label "(" Static_Expression ")";
PathnameElemPack . Pathname_Element ::= Package_Simple_Name;

PhysicalLiteral . Physical_Literal ::= Name;
PhysicalLiteral . Physical_Literal ::= Abstract_Literal Name;

-- TODO: impl
Physical_Type_Definition ::= Range_Constraint "units" Primary_Unit_Declaration { Secondary_Unit_Declaration } "end" "units" [ Physical_Type_Simple_Name ];
-- ENDTODO

PortClause . Port_Clause ::= Port "(" Port_List ")" ";";

_ . Port_List ::= Port_Interface_List;

PortMapAspect . Port_Map_Aspect ::= "port" "map" "(" Port_Association_List ")";

PrefixName . Prefix ::= Name;
PrefixFcall . Prefix ::= Function_Call;

PrimName . Primary ::= Name;
PrimLit . Primary ::= Literal;
PrimAggr . Primary ::= Aggregate;
PrimFcall . Primary ::= Function_Call;
PrimQexp . Primary ::= Qualified_Expression;
PrimCast . Primary ::= Type_Conversion;
PrimAlloc . Primary ::= Allocator;
PrimParen . Primary ::= "(" Expression ")";

PrimaryUnit . Primary_Unit ::= Entity_Declaration;
PrimaryUnit . Primary_Unit ::= Configuration_Declaration;
PrimaryUnit . Primary_Unit ::= Package_Declaration;
PrimaryUnit . Primary_Unit ::= Package_Instantiation_Declaration
PrimaryUnit . Primary_Unit ::= Context_Declaration;
PrimaryUnit . Primary_Unit ::= Psl_Verification_Unit;

_ . Primary_Unit_Declaration ::= Identifier ";";

ProcedureCall       . Procedure_Call ::= Procedure_Name;
ProcedureCallActual . Procedure_Call ::= Procedure_Name [ "(" Actual_Parameter_Part ")" ];

ProcCallStmt . Procedure_Call_Statement ::=  Procedure_Call ";";
ProcCallStmtL . Procedure_Call_Statement ::= Label ":" Procedure_Call ";";

ProcSpec . Procedure_Specification ::= "procedure" Designator Subprogram_Header ;
ProcSpecFp . Procedure_Specification ::= "procedure" Designator Subprogram_Header "(" Formal_Parameter_List ")";
ProcSpecParamFP . Procedure_Specification ::= "procedure" Designator Subprogram_Header [ Parameter ] "(" Formal_Parameter_List ")";

ProcDeclItemSd . Process_Declarative_Item ::= Subprogram_Declaration;
ProcDeclItemSb . Process_Declarative_Item ::= Subprogram_Body;
ProcDeclItemSi . Process_Declarative_Item ::= Subprogram_Instantiation_Declaration;
ProcDeclItemPd . Process_Declarative_Item ::= Package_Declaration;
ProcDeclItemPb . Process_Declarative_Item ::= Package_Body;
ProcDeclItemPi . Process_Declarative_Item ::= Package Instantiation_Declaration;
ProcDeclItemTd . Process_Declarative_Item ::= Type_Declaration;
ProcDeclItemSd . Process_Declarative_Item ::= Subtype_Declaration;
ProcDeclItemCd . Process_Declarative_Item ::= Constant_Declaration;
ProcDeclItemVd . Process_Declarative_Item ::= Variable_Declaration;
ProcDeclItemFd . Process_Declarative_Item ::= File_Declaration;
ProcDeclItemAd . Process_Declarative_Item ::= Alias_Declaration;
ProcDeclItemAttd . Process_Declarative_Item ::= Attribute_Declaration;
ProcDeclItemAtts . Process_Declarative_Item ::= Attribute_Specification;
ProcDeclItemUc . Process_Declarative_Item ::= Use_Clause;
ProcDeclItemGt . Process_Declarative_Item ::= Group_Template_Declaration;
ProcDeclItemGd . Process_Declarative_Item ::= Group_Declaration;


terminator Process_Declarative_Item "";
Process_Declarative_Part ::= [Process_Declarative_Item]

ProcSensListAll . Process_Sensitivity_List ::= "all";
ProcSensList . Process_Sensitivity_List ::= Sensitivity_List;

ProcessStmt      . Process_Statement ::=                               "process"                                               Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"           ";";
ProcessStmtIs    . Process_Statement ::=                               "process"                                       "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"           ";";
ProcessStmtS     . Process_Statement ::=                               "process"  "(" Process_Sensitivity_List ")"           Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"           ";";
ProcessStmtSIs   . Process_Statement ::=                               "process"  "(" Process_Sensitivity_List ")"   "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"           ";";
ProcessStmtP     . Process_Statement ::=                "postponed"  "process"                                               Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"           ";";
ProcessStmtPIs   . Process_Statement ::=                "postponed"  "process"                                       "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"           ";";
ProcessStmtPS    . Process_Statement ::=                "postponed"  "process"  "(" Process_Sensitivity_List ")"           Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"           ";";
ProcessStmtPSIs  . Process_Statement ::=                "postponed"  "process"  "(" Process_Sensitivity_List ")"   "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"           ";";
ProcessStmtL     . Process_Statement ::=  Label ":"                  "process"                                               Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"  Label  ";";
ProcessStmtLIs   . Process_Statement ::=  Label ":"                  "process"                                       "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"  Label  ";";
ProcessStmtLS    . Process_Statement ::=  Label ":"                  "process"  "(" Process_Sensitivity_List ")"           Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"  Label  ";";
ProcessStmtLSIs  . Process_Statement ::=  Label ":"                  "process"  "(" Process_Sensitivity_List ")"   "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"                 "process"  Label  ";";
ProcessStmtLP    . Process_Statement ::=  Label ":"   "postponed"  "process"                                               Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"  Label  ";";
ProcessStmtLPIs  . Process_Statement ::=  Label ":"   "postponed"  "process"                                       "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"  Label  ";";
ProcessStmtLPS   . Process_Statement ::=  Label ":"   "postponed"  "process"  "(" Process_Sensitivity_List ")"           Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"  Label  ";";
ProcessStmtLPSIs . Process_Statement ::=  Label ":"   "postponed"  "process"  "(" Process_Sensitivity_List ")"   "is"  Process_Declarative_Part "begin" Process_Statement_Part "end"  "postponed"  "process"  Label  ";";

Process_Statement_Part ::= [Sequential_Statement];

ProtTypeBody . Protected_Type_Body ::= "protected" "body" Protected_Type_Body_Declarative_Part "end" "protected" "body" ;
ProtTypeBody . Protected_Type_Body ::= "protected" "body" Protected_Type_Body_Declarative_Part "end" "protected" "body" Simple Name;

ProtTypeBodyDeclItemSd . Protected_Type_Body_Declarative_Item ::= Subprogram_Declaration;
ProtTypeBodyDeclItemSb . Protected_Type_Body_Declarative_Item ::= Subprogram_Body;
ProtTypeBodyDeclItemSi . Protected_Type_Body_Declarative_Item ::= Subprogram_Instantiation_Declaration;
ProtTypeBodyDeclItemPd . Protected_Type_Body_Declarative_Item ::= Package_Declaration;
ProtTypeBodyDeclItemPe . Protected_Type_Body_Declarative_Item ::= Package_Body;
ProtTypeBodyDeclItemPi . Protected_Type_Body_Declarative_Item ::= Package_Instantiation_Declaration;
ProtTypeBodyDeclItemTd . Protected_Type_Body_Declarative_Item ::= Type_Declaration;
ProtTypeBodyDeclItemSd . Protected_Type_Body_Declarative_Item ::= Subtype_Declaration;
ProtTypeBodyDeclItemCd . Protected_Type_Body_Declarative_Item ::= Constant_Declaration;
ProtTypeBodyDeclItemVd . Protected_Type_Body_Declarative_Item ::= Variable_Declaration;
ProtTypeBodyDeclItemFd . Protected_Type_Body_Declarative_Item ::= File_Declaration;
ProtTypeBodyDeclItemAd . Protected_Type_Body_Declarative_Item ::= Alias_Declaration;
ProtTypeBodyDeclItemAtd . Protected_Type_Body_Declarative_Item ::= Attribute_Declaration;
ProtTypeBodyDeclItemAS . Protected_Type_Body_Declarative_Item ::= Attribute_Specification;
ProtTypeBodyDeclItemUc . Protected_Type_Body_Declarative_Item ::= Use_Clause;
ProtTypeBodyDeclItemGt . Protected_Type_Body_Declarative_Item ::= Group_Template_Declaration;
ProtTypeBodyDeclItemGd . Protected_Type_Body_Declarative_Item ::= Group_Declaration;

separator Protected_Type_Body_Declarative_Item "";
Protected_Type_Body_Declarative_Part ::= [Protected_Type_Body_Declarative_Item];

ProtTypeDecl . Protected_Type_Declaration ::= "protected" Protected_Type_Declarative_Part "end" "protected" ;
ProtTypeDecl . Protected_Type_Declaration ::= "protected" Protected_Type_Declarative_Part "end" "protected" [ Protected_Type_Simple_Name ];

ProtTypeDeclItemSd . Protected_Type_Declarative_Item ::= Subprogram_Declaration;
ProtTypeDeclItemSi . Protected_Type_Declarative_Item ::= Subprogram_Instantiation_Declaration;
ProtTypeDeclItemAttr . Protected_Type_Declarative_Item ::= Attribute_Specification;
ProtTypeDeclItemUse . Protected_Type_Declarative_Item ::= Use_Clause;

separator Protected_Type_Declarative_Item "";
_ . Protected_Type_Declarative_Part ::= [Protected_Type_Declarative_Item];

ProtectedTypeDef. Protected_Type_Definition ::= Protected_Type_Declaration;
ProtectedTypeDef. Protected_Type_Definition ::= Protected_Type_Body;

QualifiedExpExp . Qualified_Expression ::= Type_Mark "'" "(" Expression ")";
QualifiedExpAggr . Qualified_Expression ::= Type_Mark "'" Aggregate;

Range ::=
Range_Attribute_Na


Range_Constraint ::= Range Range;

Record_Constraint ::= "(" [Record_Element_Constraint] ")";

separator Record_Element_Constraint ",";
Record_Element_Constraint ::= Simple_Name Element_Constraint;

Record_Element_Resolution ::= Simple_Name Resolution_Indication;


separator nonempty Record_Element_Resolution ",";
_ . Record_Resolution ::= [Record_Element_Resolution];

terminator Element_Declaration "";
RecordTypeDef . Record_Type_Definition ::= "record"                       "end" "record" ;
RecordTypeDef . Record_Type_Definition ::= "record"                       "end" "record"  Simple_Name ;
RecordTypeDef . Record_Type_Definition ::= "record" Element_Declaration "end" "record" ;
RecordTypeDef . Record_Type_Definition ::= "record" Element_Declaration "end" "record"  Simple_Name ;

RelationU . Relation ::= Shift_Expression ;
RelationB . Relation ::= Shift_Expression Relational_Operator Shift_Expression;


-- TODO: Impl!
Relative_Pathname ::= { ^ . } Partial_Pathname;
token Relational_Operator (= | /= | < | <= | > | >= | ?= | ?/= | ?< | ?<= | ?> | ?>=);

-- End TODO

ReportStmt . Report_Statement ::=             "report" Expression  ";";
ReportStmtSev . Report_Statement ::=             "report" Expression  "severity" Expression  ";";
ReportStmtL . Report_Statement ::=  Label ":"  "report" Expression  ";";
ReportStmtLSEV . Report_Statement ::=  Label ":"  "report" Expression  "severity" Expression  ";";

Resolution_Indication ::=
ResolutionInd . Resolution_Indication ::= Resolution_Function_Name;
ResolutionInd . Resolution_Indication ::= "(" Element_Resolution ")";

RetStmt . Return_Statement ::=               "return"  ";";
RetStmtE . Return_Statement ::=               "return" Expression ";";
RetStmtL . Return_Statement ::= Label ":" "return"  ";";
RetStmtLE . Return_Statement ::= Label ":" "return" Expression ";";

ScalarTypeDefEnum . Scalar_Type_Definition ::= Enumeration_Type_Definition;
ScalarTypeDefInt . Scalar_Type_Definition ::= Integer_Type_Definition;
ScalarTypeDefFloat . Scalar_Type_Definition ::= Floating_Type_Definition;
ScalarTypeDefPhys . Scalar_Type_Definition ::= Physical_Type_Definition;

Secondary_Unit ::=
SecondaryUnitArch . Secondary_Unit ::= Architecture_Body;
SecondaryUnitBody . Secondary_Unit ::= Package_Body;

SecUnitDelc . Secondary_Unit_Declaration ::= Identifier "=" Physical_Literal ";";

_ . Selected_Expressions ::= [Selected_Expression];

separator nonempty Selected_Expression ",";
SelectedExpression . Selected_Expression ::= Expression "when" [Choice];

SelectedForceAssignment . Selected_Force_Assignment ::= "with" Expression "select"         Target "<=" "force"                Selected_Expressions ";";
SelectedForceAssignment . Selected_Force_Assignment ::= "with" Expression "select"         Target "<=" "force"  Force_Mode  Selected_Expressions ";";
SelectedForceAssignment . Selected_Force_Assignment ::= "with" Expression "select"  "?"  Target "<=" "force"                Selected_Expressions ";";
SelectedForceAssignment . Selected_Force_Assignment ::= "with" Expression "select"  "?"  Target "<=" "force"  Force_Mode  Selected_Expressions ";";

SelectedName . Selected_Name ::= Prefix "." Suffix;

SelectedSigAssign . Selected_Signal_Assignment ::= Selected_Waveform_Assignment;
SelectedSigAssign . Selected_Signal_Assignment ::= Selected_Force_Assignment;

SelectedVarAssign . Selected_Variable_Assignment ::= "with" Expression "select" Target ":=" Selected_Expressions ";";
SelectedVarAssignQ . Selected_Variable_Assignment ::= "with" Expression "select" "?" Target ":=" Selected_Expressions ";";

SelectedWavAssign . Selected_Waveform_Assignment ::= "with" Expression "select"         Target "<="                   Selected_Waveforms ";";
SelectedWavAssignD . Selected_Waveform_Assignment ::= "with" Expression "select"        Target "<="  Delay_Mechanism  Selected_Waveforms ";";
SelectedWavAssignQ . Selected_Waveform_Assignment ::= "with" Expression "select"   "?"  Target "<="                   Selected_Waveforms ";";
SelectedWavAssignQD . Selected_Waveform_Assignment ::= "with" Expression "select"  "?"  Target "<="  Delay_Mechanism  Selected_Waveforms ";";

_ . Selected_Waveforms ::= [Selected_Waveform];

separator nonempty Selected_Waveform ",";
SelectedWaveform . Selected_Waveform ::= Waveform "when" [Choice];

_ . Sensitivity_Clause ::= "on" Sensitivity_List;

separator nonempty Signal_Name ",";
Sensitivity_List ::= [Signal_Name];

terminator Sequential_Statement "";
_ . Sequence_Of_Statements ::= [Sequential_Statement];

SeqStmtWait . Sequential_Statement ::= Wait_Statement;
SeqStmtAssert . Sequential_Statement ::= Assertion_Statement;
SeqStmtReport . Sequential_Statement ::= Report_Statement;
SeqStmtSigass . Sequential_Statement ::= Signal_Assignment_Statement;
SeqStmtVarass . Sequential_Statement ::= Variable_Assignment_Statement;
SeqStmtProc . Sequential_Statement ::= Procedure_Call_Statement;
SeqStmtIf . Sequential_Statement ::= If_Statement;
SeqStmtCase . Sequential_Statement ::= Case_Statement;
SeqStmtLoop . Sequential_Statement ::= Loop_Statement;
SeqStmtNext . Sequential_Statement ::= Next_Statement;
SeqStmtExit . Sequential_Statement ::= Exit_Statement;
SeqStmtRet . Sequential_Statement ::= Return_Statement;
SeqStmtNull . Sequential_Statement ::= Null_Statement;

SimpleExprU . Shift_Expression ::= Simple_Expression;
SimpleExprB . Shift_Expression ::= Simple_Expression Shift_Operator Simple_Expression;

-- TODO: Sll | Srl | Sla | Sra | Rol | Ror
token Shift_Operator ('d');

token Sign ('+' | '-');

SigAssStmtSimple . Signal_Assignment_Statement ::= Simple_Signal_Assignment;
SigAssStmtLSimple . Signal_Assignment_Statement ::= Label ":" Simple_Signal_Assignment;

SigAssStmtCond . Signal_Assignment_Statement ::= Conditional_Signal_Assignment;
SigAssStmtLCond . Signal_Assignment_Statement ::= Label ":" Conditional_Signal_Assignment;

SigAssStmtSel . Signal_Assignment_Statement ::= Selected_Signal_Assignment;
SigAssStmtLSel . Signal_Assignment_Statement ::= Label ":" Selected_Signal_Assignment;

SignalDecl . Signal_Declaration ::= "signal" [Identifier] ":" Subtype_Indication ";"
SignalDeclE . Signal_Declaration ::= "signal" [Identifier] ":" Subtype_Indication ":=" Expression ";"
SignalDeclK . Signal_Declaration ::= "signal" [Identifier] ":" Subtype_Indication Signal_Kind ";"
SignalDeclKE . Signal_Declaration ::= "signal" [Identifier] ":" Subtype_Indication Signal_Kind ":=" Expression ";"

SigKindReg . Signal_Kind ::= Register;
SigKindBus . Signal_Kind ::= Bus

separator nonempty Signal_Name ",";
SigListNames . Signal_List ::= [Signal_Name] ";";
SigListOthers . Signal_List ::= "others";
SigListAll . Signal_List ::= "all";

separator Type_Mark ",";
Sig . Signature ::= [Type_Mark] ;
Sig . Signature ::= [Type_Mark] "return" Type_Mark;

Simple_Configuration_Specification ::=
For Component_Specification Binding_Indication ; [ End For ; ]

_ . SExpTem ::= Adding_Operator Term;
terminator SExpTerm "";
Simple_Expression ::= Sign Term [SExpTerm];
Simple_Expression ::= Term [SExpTerm];

SimpleForceAssign . Simple_Force_Assignment ::= Target "<=" "force" Expression ";";
SimpleForceAssignFm . Simple_Force_Assignment ::= Target "<=" "force" Force_Mode Expression ";";

_ . Simple_Name ::= Identifier;

SimpleReleaseAssign . Simple_Release_Assignment ::= Target "<=" Release ";"
SimpleReleaseAssign . Simple_Release_Assignment ::= Target "<=" Release Force_Mode ";"

SimpleSigAssignWave . Simple_Signal_Assignment ::= Simple_Waveform_Assignment;
SimpleSigAssignForce . Simple_Signal_Assignment ::= Simple_Force_Assignment;
SimpleSigAssignRelease . Simple_Signal_Assignment ::= Simple_Release_Assignment;

SimpleWavAssignD . Simple_Waveform_Assignment ::= Target "<=" Delay_Mechanism Waveform ;
SimpleWavAssign  . Simple_Waveform_Assignment ::= Target "<=" Waveform ;

SimpleVarAssign . Simple_Variable_Assignment ::= Target ":=" Expression ";";

SliceName . Slice_Name ::= Prefix "(" Discrete_Range ")";

-- TODO: Maybe token?
String_Literal ::= " { Graphic_Character } "

SubprogBody . Subprogram_Body ::= Subprogram_Specification "is" Subprogram_Declarative_Part "begin" Subprogram_Statement_Part "end"                           ;
SubprogBodyD . Subprogram_Body ::= Subprogram_Specification "is" Subprogram_Declarative_Part "begin" Subprogram_Statement_Part "end"                 Designator;
SubprogBodyS . Subprogram_Body ::= Subprogram_Specification "is" Subprogram_Declarative_Part "begin" Subprogram_Statement_Part "end" Subprogram_Kind           ;
SubprogBodySD . Subprogram_Body ::= Subprogram_Specification "is" Subprogram_Declarative_Part "begin" Subprogram_Statement_Part "end" Subprogram_Kind Designator;

_ . Subprogram_Declaration ::= Subprogram_Specification ";";

SubprogramDeclItem . Subprogram_Declarative_Item ::= Subprogram_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Subprogram_Body;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Subprogram_Instantiation_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Package_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Package_Body;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Package_Instantiation_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Type_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Subtype_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Constant_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Variable_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= File_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Alias_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Attribute_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Attribute_Specification;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Use_Clause;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Group_Template_Declaration;
SubprogramDeclItem . Subprogram_Declarative_Item ::= Group_Declaration;

terminator Subprogram_Declarative_Item "";
_ . Subprogram_Declarative_Part ::= [Subprogram_Declarative_Item];

SubprogramHeader . Subprogram_Header ::= ;
SubprogramHeaderGen . Subprogram_Header ::= "generic" "(" Generic_List ")";
SubprogramHeaderGenAsp . Subprogram_Header ::= "generic" "(" Generic_List ")" Generic_Map_Aspect;

Subprogram_Instantiation_Declaration ::=
Subprogram_Kind Identifier Is New Uninstantiated_Subprogram_Name [ Signature ] [ Generic_Map_Aspect ] ;

SubprogramKindProc . Subprogram_Kind ::= Procedure;
SubprogramKindFunc . Subprogram_Kind ::= Function

Subprogram_Specification ::=
SubprogramSpecProc . Procedure_Specification;
SubprogramSpecFunc . Function_Specification;

terminator Sequential_Statement "";
SubprogStmtPart . Subprogram_Statement_Part ::= [Sequential_Statement];

SubtypeDecl . Subtype_Declaration ::= "subtype" Identifier "is" Subtype_Indication;

SubtypeIndication   . Subtype_Indication ::=                       Type_Mark           ;
SubtypeIndicationC  . Subtype_Indication ::=                       Type_Mark Constraint;
SubtypeIndicationR  . Subtype_Indication ::= Resolution_Indication Type_Mark           ;
SubtypeIndicationRC . Subtype_Indication ::= Resolution_Indication Type_Mark Constraint;

SuffixName . Suffix ::= Simple_Name;
SuffixChar . Suffix ::= Character_Literal;
SuffixOp   . Suffix ::= Operator_Symbol;
SuffixAll  . Suffix ::= "all";

TargetName . Target ::= Name;
TargetAggr . Target ::= Aggregate;

Term ::= Factor { Multiplying_Operator Factor };

TimeoutClause . Timeout_Clause ::= "for" Time_Expression;

terminator Graphic_Character "";
ToolDir . Tool_Directive ::= "`" Identifier [Graphic_Character];

TypeConv . Type_Conversion ::= Type_Mark "(" Expression ")";

Type_Declaration ::= Full_Type_Declaration;
Type_Declaration ::= Incomplete_Type_Declaration;

TypeDefinitionScal . Type_Definition ::= Scalar_Type_Definition;
TypeDefinitionComp . Type_Definition ::= Composite_Type_Definition;
TypeDefinitionAcce . Type_Definition ::= Access_Type_Definition;
TypeDefinitionFile . Type_Definition ::= File_Type_Definition;
TypeDefinitionProt . Type_Definition ::= Protected_Type_Definition;

TypeMarkType . Type_Mark ::= Type_Name;
TypeMarkSubtype . Type_Mark ::= Subtype_Name;

separator nonempty Index_Subtype_Definition ",";
UnboundArrDef . Unbounded_Array_Definition ::= "array" "(" [Index_Subtype_Definition] ")" "of" Element_Subtype_Indication;

separator nonempty Selected_Name ",";
UseClause . Use_Clause ::= "use" [Selected_Name];

VarAssignStmtSimpL . Variable_Assignment_Statement ::= Label ":" Simple_Variable_Assignment;
VarAssignStmtSimp  . Variable_Assignment_Statement ::=           Simple_Variable_Assignment;
VarAssignStmtCondL . Variable_Assignment_Statement ::= Label ":" Conditional_Variable_Assignment;
VarAssignStmtCond  . Variable_Assignment_Statement ::=           Conditional_Variable_Assignment;
VarAssignStmtSeleL . Variable_Assignment_Statement ::= Label ":" Selected_Variable_Assignment;
VarAssignStmtSele  . Variable_Assignment_Statement ::=           Selected_Variable_Assignment;

VariableDecl    . Variable_Declaration ::=            Variable              ":" Subtype_Indication                 ;
VariableDeclE   . Variable_Declaration ::=            Variable              ":" Subtype_Indication  ":=" Expression;
VariableDeclI   . Variable_Declaration ::=            Variable  Identifier  ":" Subtype_Indication                 ;
VariableDeclIE  . Variable_Declaration ::=            Variable  Identifier  ":" Subtype_Indication  ":=" Expression;
VariableDeclS   . Variable_Declaration ::=  "shared"  Variable              ":" Subtype_Indication                 ;
VariableDeclSE  . Variable_Declaration ::=  "shared"  Variable              ":" Subtype_Indication  ":=" Expression;
VariableDeclSI  . Variable_Declaration ::=  "shared"  Variable  Identifier  ":" Subtype_Indication                 ;
VariableDeclSIE . Variable_Declaration ::=  "shared"  Variable  Identifier  ":" Subtype_Indication  ":=" Expression;

VerifiUnitBindInd . Verification_Unit_Binding_Indication ::=
                  "use" "vunit" Verification_Unit_List;

separator nonempty Verification_Unit_List ",";
_ . Verification_Unit_List ::= [Verification_Unit_Name];

WaitStmt     . Wait_Statement ::=             "wait"                                                         ;
WaitStmtT    . Wait_Statement ::=             "wait"                                          Timeout_Clause ;
WaitStmtC    . Wait_Statement ::=             "wait"                       Condition_Clause                  ;
WaitStmtCT   . Wait_Statement ::=             "wait"                       Condition_Clause   Timeout_Clause ;
WaitStmtS    . Wait_Statement ::=             "wait"  Sensitivity_Clause                                     ;
WaitStmtST   . Wait_Statement ::=             "wait"  Sensitivity_Clause                      Timeout_Clause ;
WaitStmtSC   . Wait_Statement ::=             "wait"  Sensitivity_Clause   Condition_Clause                  ;
WaitStmtSCT  . Wait_Statement ::=             "wait"  Sensitivity_Clause   Condition_Clause   Timeout_Clause ;
WaitStmtL    . Wait_Statement ::=  Label ":"  "wait"                                                         ;
WaitStmtLT   . Wait_Statement ::=  Label ":"  "wait"                                          Timeout_Clause ;
WaitStmtLC   . Wait_Statement ::=  Label ":"  "wait"                       Condition_Clause                  ;
WaitStmtLCT  . Wait_Statement ::=  Label ":"  "wait"                       Condition_Clause   Timeout_Clause ;
WaitStmtLS   . Wait_Statement ::=  Label ":"  "wait"  Sensitivity_Clause                                     ;
WaitStmtLST  . Wait_Statement ::=  Label ":"  "wait"  Sensitivity_Clause                      Timeout_Clause ;
WaitStmtLSC  . Wait_Statement ::=  Label ":"  "wait"  Sensitivity_Clause   Condition_Clause                  ;
WaitStmtLSCT . Wait_Statement ::=  Label ":"  "wait"  Sensitivity_Clause   Condition_Clause   Timeout_Clause ;

separator nonempty Waveform_Element ",";
WaveformList . Waveform ::= [Waveform_Element];
WaveformUnaffected . Waveform ::= "unaffected";

WaveElemValue . Waveform_Element ::= Value_Expression;
WaveElemValueAfter . Waveform_Element ::= Value_Expression "after" Time_Expression;
WaveElemNull . Waveform_Element ::= "null";
WaveElemNullAfter . Waveform_Element ::= "null" "after" Time_Expression;
