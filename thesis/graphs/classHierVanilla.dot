digraph classHierarchy {
    node [shape=box];
    edge [arrowhead=empty];
    graph [ratio=1.44, 
        root="AstNode", 
        overlap=false,
        splines=true];

    subgraph cluster_root {
        graph [color=grey, label="root_class.h"];

        AstNode [label="AstNode|nil"];
    }

    SequentialStmt [label="SequentialStmt"];
    LoopStatement [label="LoopStatement"];
    WhileLoopStatement [label="WhileLoopStatement"];
    ForLoopStatement [label="ForLoopStatement"];
    IfSequential [label="IfSequential"];
    ReturnStmt [label="ReturnStmt"];
    SignalSeqAssignment [label="SignalSeqAssignment"];
    CaseSeqStmt [label="CaseSeqStmt"];
    ProcedureCall [label="ProcedureCall"];
    VariableSeqAssignment [label="VariableSeqAssignment"];
    ReportStmt [label="ReportStmt"];
    AssertStmt [label="AssertStmt"];
    WaitStmt [label="WaitStmt"];

    Expression [label="Expression"];
    ExpUnary [label="ExpUnary"];
    ExpBinary [label="ExpBinary"];
    ExpAggregate [label="ExpAggregate"];
    ExpAttribute [label="ExpAttribute"];
    ExpBitstring [label="ExpBitstring"];
    ExpCharacter [label="ExpCharacter"];
    ExpConcat [label="ExpConcat"];
    ExpFunc [label="ExpFunc"];
    ExpInteger [label="ExpInteger"];
    ExpReal [label="ExpReal"];
    ExpName [label="ExpName"];
    ExpString [label="ExpString"];
    ExpRange [label="ExpRange"];
    ExpEdge [label="ExpEdge"];
    ExpUAbs [label="ExpUAbs"];
    ExpUNot [label="ExpUNot"];
    ExpArithmetic [label="ExpArithmetic"];

    ExpLogical [label="ExpLogical"];
    ExpRelation [label="ExpRelation"];
    ExpShift [label="ExpShift"];

    ExpObjAttribute [label="ExpObjAttribute"];
    ExpTypeAttribute [label="ExpTypeAttribute"];

    InterfacePort [label="InterfacePort"];
    ComponentBase [label="ComponentBase"];
    Entity [label="Entity"];
    VType [label="VType"];
    VTypeERROR [label="VTypeERROR"];
    VTypePrimitive [label="VTypePrimitive"];
    VTypeArray [label="VTypeArray"];
    VTypeRange [label="VTypeRange"];
    VTypeRangeConst [label="VTypeRangeConst"];
    VTypeRangeExpr [label="VTypeRangeExpr"];
    VTypeEnum [label="VTypeEnum"];
    VTypeRecord [label="VTypeRecord"];
    VTypeDef [label="VTypeDef"];
    VSubTypeDef [label="VSubTypeDef"];
    ScopeBase [label="ScopeBase"];
    SubprogramBody [label="SubprogramBody"];
    Scope [label="Scope"];
    Architecture [label="Architecture"];
    ProcessStatement [label="ProcessStatement"];
    Package [label="Package"];
    ActiveScope [label="ActiveScope"];
    BlockStatement [label="BlockStatement"];
    SigVarBase [label="SigVarBase"];
    Signal [label="Signal"];
    Variable [label="Variable"];
    Statement [label="ConcurrentStatement"];
    GenerateStatement [label="GenerateStatement"];
    ForGenerate [label="ForGenerate"];
    IfGenerate [label="IfGenerate"];
    SignalAssignment [label="SignalAssignment"];
    CondSignalAssignment [label="CondSignalAssignment"];
    ComponentInstantiation [label="ComponentInstantiation"];
    StatementList [label="StatementList"];
    FinalStatement [label="FinalStatement"];
    ProcessStatement [label="ProcessStatement"];
    BlockStatement [label="BlockStatement"];

    WhileLoopStatement -> SequentialStmt;
    ForLoopStatement -> SequentialStmt;

    ExpUnary -> Expression;
    ExpEdge -> ExpUnary;
    ExpUAbs -> ExpUnary;
    ExpUNot -> ExpUnary;
    ExpBinary -> Expression;
    ExpArithmetic -> ExpBinary;
    ExpRange -> Expression;
    ExpLogical -> ExpBinary;
    ExpRelation -> ExpBinary;
    ExpShift -> ExpBinary;
    ExpAggregate -> Expression;
    ExpAttribute -> Expression;
    ExpObjAttribute -> ExpAttribute;
    ExpTypeAttribute -> ExpAttribute;
    ExpBitstring -> Expression;
    ExpCharacter -> Expression;
    ExpConcat -> Expression;
    ExpFunc -> Expression;
    ExpInteger -> Expression;
    ExpReal -> Expression;
    ExpName -> Expression;
    ExpString -> Expression;

    SequentialStmt -> AstNode;
    Expression -> AstNode;

    LoopStatement -> SequentialStmt;
    IfSequential -> SequentialStmt;
    ReturnStmt -> SequentialStmt;
    SignalSeqAssignment -> SequentialStmt;
    CaseSeqStmt -> SequentialStmt;
    ProcedureCall -> SequentialStmt;
    VariableSeqAssignment -> SequentialStmt;
    ReportStmt -> SequentialStmt;
    AssertStmt -> ReportStmt;
    WaitStmt -> SequentialStmt;

    InterfacePort -> AstNode;
    ComponentBase -> AstNode;
    Entity -> ComponentBase;

    VType -> AstNode;
    VTypeERROR -> VType;
    VTypePrimitive -> VType;
    VTypeArray -> VType;
    VTypeRange -> VType;
    VTypeRangeConst -> VTypeRange;
    VTypeRangeExpr -> VTypeRange;
    VTypeEnum -> VType;
    VTypeRecord -> VType;
    VTypeDef -> VType;
    VSubTypeDef -> VTypeDef;

    ScopeBase -> AstNode;
    SubprogramBody -> ScopeBase;
    Scope -> ScopeBase;
    Architecture -> Scope;
    ProcessStatement -> Scope;
    Package -> Scope;
    ActiveScope -> ScopeBase;
    BlockStatement -> ScopeBase;

    SigVarBase -> AstNode;
    Signal -> SigVarBase;
    Variable -> SigVarBase;

    Statement -> AstNode;
    GenerateStatement -> Statement;
    ForGenerate -> GenerateStatement;
    IfGenerate -> GenerateStatement;
    SignalAssignment -> Statement;
    CondSignalAssignment -> Statement;
    ComponentInstantiation -> Statement;
    StatementList -> Statement;
    BlockStatement -> Statement;
    InitialStatment -> StatementList;
    FinalStatement -> StatementList;
    ProcessStatement -> StatementList;

}
