digraph classHierarchy {
    node [shape=record];
    edge [arrowhead=empty];
    rankdir = LR;

    {
        node [shape=plaintext];
        edge [style=invis];

        n1 [label=""]; n2 [label=""];
        n3 [label=""]; n4 [label=""];
        n5 [label=""]; n6 [label=""];
        n7 [label=""]; n8 [label=""];
        n9 [label=""]; n10 [label=""];
        n1 -> n2 -> n3 -> n4 -> n5 ->
        n6 -> n7 -> n8 -> n9 -> n10;
    }

    {
        rank=same;
        n5;
        AstNode [label="AstNode|nil"];
    }

    {
        rank = same; n6;
        SequentialStmt [label="SequentialStmt"];
        Expression [label="Expression"];
    }

    {
        rank = same; n7;
        LoopStatement [label="LoopStatement"];
    }

    {
        rank = same; n8;
        WhileLoopStatement [label="WhileLoopStatement"];
        ForLoopStatement [label="ForLoopStatement"];
    }


    {
        rank = same; n9;
        IfSequential [label="IfSequential"];
        ReturnStmt [label="ReturnStmt"];
        SignalSeqAssignment [label="SignalSeqAssignment"];
        CaseSeqStmt [label="CaseSeqStmt"];
        ProcedureCall [label="ProcedureCall"];
        VariableSeqAssignment [label="VariableSeqAssignment"];
        ReportStmt [label="ReportStmt"];
        AssertStmt [label="AssertStmt"];
        WaitStmt [label="WaitStmt"];
    }

    {
        rank = same;
        n8;
        ExpUnary [label="ExpUnary"];
        ExpBinary [label="ExpBinary"];
        ExpAggregate [label="ExpAggregate"];
        ExpAttribute [label="ExpAttribute"];
        ExpBitstring [label="ExpBitstring"];
        ExpCharacter [label="ExpCharacter"];
        ExpConcat [label="ExpConcat"];
        ExpFunc [label="ExpFunc"];
        ExpInteger [label="ExpInteger"];
        ExpReal [label="ExpReal"];
        ExpName [label="ExpName"];
        ExpString [label="ExpString"];
        ExpRange [label="ExpRange"];
    }

    {
        rank = same;
        n9;
        ExpEdge [label="ExpEdge"];
        ExpUAbs [label="ExpUAbs"];
        ExpUNot [label="ExpUNot"];
        ExpArithmetic [label="ExpArithmetic"];

        ExpLogical [label="ExpLogical"];
        ExpRelation [label="ExpRelation"];
        ExpShift [label="ExpShift"];
    }


        ExpObjAttribute [label="ExpObjAttribute"];
        ExpTypeAttribute [label="ExpTypeAttribute"];
    InterfacePort [label="InterfacePort"];
    ComponentBase [label="ComponentBase"];
      Entity [label="Entity"];
    VType [label="VType"];
      VTypeERROR [label="VTypeERROR"];
      VTypePrimitive [label="VTypePrimitive"];
      VTypeArray [label="VTypeArray"];
      VTypeRange [label="VTypeRange"];
        VTypeRangeConst [label="VTypeRangeConst"];
        VTypeRangeExpr [label="VTypeRangeExpr"];
      VTypeEnum [label="VTypeEnum"];
      VTypeRecord [label="VTypeRecord"];
      VTypeDef [label="VTypeDef"];
        VSubTypeDef [label="VSubTypeDef"];
    ScopeBase [label="ScopeBase"];
      SubprogramBody [label="SubprogramBody"];
      Scope [label="Scope"];
        Architecture [label="Architecture"];
        ProcessStatement [label="ProcessStatement"];
        Package [label="Package"];
      ActiveScope [label="ActiveScope"];
      BlockStatement [label="BlockStatement"];
    SigVarBase [label="SigVarBase"];
      Signal [label="Signal"];
      Variable [label="Variable"];
    "Architecture::Statement" [label="ConcurrentStatement"];
      GenerateStatement [label="GenerateStatement"];
        ForGenerate [label="ForGenerate"];
        IfGenerate [label="IfGenerate"];
      SignalAssignment [label="SignalAssignment"];
      CondSignalAssignment [label="CondSignalAssignment"];
      ComponentInstantiation [label="ComponentInstantiation"];
      StatementList [label="StatementList"];
        FinalStatement [label="FinalStatement"];
        ProcessStatement [label="ProcessStatement"];
      BlockStatement [label="BlockStatement"];

WhileLoopStatement -> SequentialStmt;
ForLoopStatement -> SequentialStmt;

ExpUnary -> Expression;
ExpEdge -> ExpUnary;
ExpUAbs -> ExpUnary;
ExpUNot -> ExpUnary;
ExpBinary -> Expression;
ExpArithmetic -> ExpBinary;
ExpRange -> Expression;
ExpLogical -> ExpBinary;
ExpRelation -> ExpBinary;
ExpShift -> ExpBinary;
ExpAggregate -> Expression;
ExpAttribute -> Expression;
ExpObjAttribute -> ExpAttribute;
ExpTypeAttribute -> ExpAttribute;
ExpBitstring -> Expression;
ExpCharacter -> Expression;
ExpConcat -> Expression;
ExpFunc -> Expression;
ExpInteger -> Expression;
ExpReal -> Expression;
ExpName -> Expression;
ExpString -> Expression;

SequentialStmt -> AstNode;
Expression -> AstNode;

LoopStatement -> SequentialStmt;
IfSequential -> SequentialStmt;
ReturnStmt -> SequentialStmt;
SignalSeqAssignment -> SequentialStmt;
CaseSeqStmt -> SequentialStmt;
ProcedureCall -> SequentialStmt;
VariableSeqAssignment -> SequentialStmt;
ReportStmt -> SequentialStmt;
AssertStmt -> ReportStmt;
WaitStmt -> SequentialStmt;

InterfacePort -> AstNode;
ComponentBase -> AstNode;
Entity -> ComponentBase;

VType -> AstNode;
VTypeERROR -> VType;
VTypePrimitive -> VType;
VTypeArray -> VType;
VTypeRange -> VType;
VTypeRangeConst -> VTypeRange;
VTypeRangeExpr -> VTypeRange;
VTypeEnum -> VType;
VTypeRecord -> VType;
VTypeDef -> VType;
VSubTypeDef -> VTypeDef;

ScopeBase -> AstNode;
SubprogramBody -> ScopeBase;
Scope -> ScopeBase;
Architecture -> Scope;
ProcessStatement -> Scope;
Package -> Scope;
ActiveScope -> ScopeBase;
BlockStatement -> ScopeBase;

SigVarBase -> AstNode;
Signal -> SigVarBase;
Variable -> SigVarBase;

"Architecture::Statement" -> AstNode;
GenerateStatement -> "Architecture::Statement";
ForGenerate -> GenerateStatement;
IfGenerate -> GenerateStatement;
SignalAssignment -> "Architecture::Statement";
CondSignalAssignment -> "Architecture::Statement";
ComponentInstantiation -> "Architecture::Statement";
StatementList -> "Architecture::Statement";
BlockStatement -> "Architecture::Statement";
InitialStatment -> StatementList;
FinalStatement -> StatementList;
ProcessStatement -> StatementList;


}
